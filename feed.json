{
    "version": "https://jsonfeed.org/version/1",
    "title": "treacherous.tech",
    "description": "",
    "home_page_url": "https://treacherous.tech",
    "feed_url": "https://treacherous.tech/feed.json",
    "user_comment": "",
    "author": {
        "name": "Yours Truly"
    },
    "items": [
        {
            "id": "https://treacherous.tech/mirroring-a-site-on-a-onion-address.html",
            "url": "https://treacherous.tech/mirroring-a-site-on-a-onion-address.html",
            "title": "Mirroring a site on a .onion address",
            "summary": " I've made a .onion Tor hidden service mirror of this here blog. Using The Tor Browser, you can now find it at&nbsp;ygwdnjw2gt6sabcrhjqmpgsn4hhddomhipdpxbx6bru2zr2damxevqyd.onion. This post is just a run through of the route I took to do it and&hellip;",
            "content_html": "\n  <p>\n    I've made a .onion Tor hidden service mirror of this here blog. Using The Tor Browser, you can now find it at&nbsp;<code>ygwdnjw2gt6sabcrhjqmpgsn4hhddomhipdpxbx6bru2zr2damxevqyd.onion</code>. This post is just a run through of the route I took to do it and some notes on the steps someone could take to do likewise, and a few pain points on the way. Lastly, I've chucked in some final points on what the world needs if Hidden Service platforms are to become more common.\n  </p>\n\n    <h3 id=\"the-what-and-the-way\">\n      The what and the way\n    </h3>\n\n  <p>\n    If the following is old hat, then skip this section and just scroll down to <strong>The Goods</strong> that follow. I still assume a lot of people aren't familiar with The Tor Network.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://treacherous.tech/media/posts/8/onion-bounces-2.jpg\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://treacherous.tech/media/posts/8/responsive/onion-bounces-2-xs.jpg 300w ,https://treacherous.tech/media/posts/8/responsive/onion-bounces-2-sm.jpg 480w ,https://treacherous.tech/media/posts/8/responsive/onion-bounces-2-md.jpg 768w ,https://treacherous.tech/media/posts/8/responsive/onion-bounces-2-lg.jpg 1024w ,https://treacherous.tech/media/posts/8/responsive/onion-bounces-2-xl.jpg 1360w ,https://treacherous.tech/media/posts/8/responsive/onion-bounces-2-2xl.jpg 1600w\"  height=\"549\" width=\"976\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    Sometimes you don't want your internet service provider (ISP) to know what you're up to on the web. This could be just a personal choice, it could be due to local laws, the internet router could be suspect if you're on a shared or unfamiliar network, or maybe you're in a country where looking up some topics are taboo if not just illegal. You may have heard of the <a href=\"https://www.torproject.org/download/\" target=\"_blank\">Tor Browser</a>, which is a web browser aimed at delivering users with strong privacy and anonymity and evade censorship. It bounces traffic through encrypted relays and delivers the site back through them as well. That's the pithy short version of what's going on. Find out more about it at the <a href=\"https://www.torproject.org/\" target=\"_blank\">Tor Project website</a>.&nbsp;\n  </p>\n\n  <p>\n    Tor itself is a <a href=\"https://svn-archive.torproject.org/svn/projects/design-paper/blocking.html\" target=\"_blank\">network</a>.&nbsp;People can also make websites inside the Tor network, or create an alternate address in it, letting people find their site on a \".onion\" address inside Tor instead of exiting out the other side. This helps to maintain the end-to-end encryption between you and the website you're visiting. It also can add another layer of anonymity for visitors.\n  </p>\n\n  <p>\n    You've likely heard of the 'Dark Web' horror stories of hit men for hire and drug markets, but also sites like the&nbsp;<a href=\"https://www.bbc.co.uk/news/technology-50150981\" target=\"_blank\">BBC</a> offer .onion addresses to help users protect themselves while visiting potentially forbidden content according to whatever filtering may be happening locally. To visit a .onion address, you need the Tor Browser, but with it you can circumvent censorship and monitoring by visiting it at&nbsp; <a href=\"https://www.bbcnewsv2vjtpsuy.onion/\" rel=\"nofollow noopener\">bbcnewsv2vjtpsuy.onion</a>.&nbsp; I won't list all the examples here, but if you want to see more examples, <a href=\"https://privacypros.io/tor/best-onion-sites/\" target=\"_blank\">check them out elsewhere</a>. There are loads.\n  </p>\n\n  <p>\n    The internet is becoming a more surveilled experience from the moment anyone gets on it. the onramps, the services and search engines and more and more of the tools we use to communicate are finding that the key way of staying in business is to categorise us and find ways to better flog things we can buy, or sell on that data to others who may have some use for it. Few software makers are traveling in the opposite direction. The Tor Project is one of these that seek to make an open source protocol out of your right to privacy. I'm interested in ways publishing platforms can bypass censorship, but also respect their visitor's rights/needs to privacy or more anonymity. Potentially, I want to use this, or a flavour of it, in a project for a large number of sites.\n  </p>\n\n  <p>\n    There are a few other services I'm interested in as well. the <a href=\"https://geti2p.net/en/\" target=\"_blank\">i2P network</a> runs another censorship circumvention service where content or service creators can run what they call <a href=\"https://geti2p.net/en/docs/api/i2ptunnel\" target=\"_blank\">eepsites</a>.&nbsp; I'm interested in how to mirror on these as well.&nbsp; In the true spirit of mad scientists, I experiment on myself.\n  </p>\n\n    <h3 id=\"the-goods\">\n      The Goods\n    </h3>\n\n  <p>\n    Now on to the technical bits. This isn't meant to be the all-singing-all-dancing tutorial on mirroring everything on Tor, but more of a \"here's what I did\" run-through. I may have done some things wrong. There may be better ways to do it. But if it helps you out and increases people using Tor Hidden Services to help users, then that's fabulous.\n  </p>\n\n  <p>\n    So, the public site I mirrored is the site you're looking at right now. It's a simple, flat-file blog hosted on <a href=\"https://pages.github.com/\" target=\"_blank\">Github Pages</a>. I don't know how well some custom functionality or any especially whiz-bang things you may have on your website will work out-of-the-box when subjected to the Tor Browser or this method of mirroring a site as a hidden service. The good news, is you'll get to find out really soon.\n  </p>\n\n    <h4 id=\"the-ingredients\">\n      The ingredients\n    </h4>\n\n  <p>\n    Firstly, we're going to need a website to mirror. Note, this is only for mirroring a website that's already available on the open, public web, not hosting something inside a .onion address exclusively. We aren't trying to hide the website or much anything about it. It's about making it accessible&nbsp; from inside the Tor network.\n  </p>\n\n  <p>\n    For this I used a really nice tool by Alec Muffett, called&nbsp;<a href=\"https://github.com/alecmuffett/eotk\" target=\"_blank\">EOTK</a>,&nbsp;to do the .onion mirroring. To host the mirror I got a cheap VPS (there are suitable candidates for this on Linode, Digital Ocean, Vultr, etc.) For the SSL certificate I used <a href=\"https://www.harica.gr/\" target=\"_blank\">harica.gr</a>, which is one of only two certificate providers that cover hidden services (I have strong opinions on this, and so more editorialising when we get to that section below).\n  </p>\n\n  <p>\n    Like any good cooking show, I've got the finished&nbsp;souffl√© <a href=\"https://ygwdnjw2gt6sabcrhjqmpgsn4hhddomhipdpxbx6bru2zr2damxevqyd.onion\" target=\"_blank\">here</a>. We need the <a href=\"https://www.torproject.org/download/\" target=\"_blank\">Tor Browser</a> to look at that, but you're going to need that anyway to see how our dish is shaping up at different stages along the way. Also, the preparation is all taking place in the terminal. Everything here assumes you're able to use that as well as do the set-up of a server and user with its own ssh key.\n  </p>\n\n  <p>\n    <em>I'm going to fast-forward a bit.&nbsp; Just know I made a number of errors along the way and what follows represents just the correct turns, and not the bad ones or dead ends. I<strong> highly recommend reading through the bulk of the EOTK repo and all doc files</strong>, including but not limited to the <a href=\"https://github.com/alecmuffett/eotk/blob/master/docs.d/HOW-TO-INSTALL.md\" target=\"_blank\">how-to-install</a> page. The <a href=\"https://github.com/alecmuffett/eotk/blob/master/docs.d/deprecated-documents.d/CHANGELOG.md\" target=\"_blank\">Changelog</a> is also really useful and can save a lot of time by reading before starting. There is also a lot of good information to be found in&nbsp; &nbsp;This post isn't meant to be a replacement for any of that, but just a summary of my efforts.</em>\n  </p>\n\n    <h4 id=\"the-server\">\n      The server\n    </h4>\n\n  <p>\n    Our .onion mirrored website needs a server.&nbsp;I fired up a&nbsp;<strong>Ubuntu 20.04 VPS</strong>. This is a standard option you can find on most any VPS provider. EOTK has instructions for various flavours of server but the steps that follow here are assuming that one.\n  </p>\n\n    <h4 id=\"creating-a-onion-mirror-of-our-website\">\n      Creating a .onion mirror of our website\n    </h4>\n\n  <p>\n    SSH into this new server. It's good to do an&nbsp;<code>apt-get update</code> and&nbsp;<code>apt-get upgrade</code>&nbsp;to start things off with the latest versions of things.\n  </p>\n\n  <p>\n    Now let's get the EOTK package from Alec's repo:<br><code>git clone https://github.com/alecmuffett/eotk.git</code>\n  </p>\n\n  <p>\n    Next head to the EOTK directory which is where most everything is going to happen.<br><code>cd eotk</code><br>\n  </p>\n\n  <p>\n    Here, were' going to build the environment based on the use of our Ubuntu 20.04 setup:<br><code>./opt.d/build-ubuntu-20.04.sh</code>\n  </p>\n\n  <p>\n    Now we're going to generate the scripts (really do look at before moving on):<br><code>./eotk make-scripts</code>\n  </p>\n\n  <p>\n    Now it's time to give EOTK the instructions it needs to mirror our website. I use nano to edit things. Use vim or whatever you want, but nano is easy:<br><code>nano your_project.tconf<br></code>\n  </p>\n\n  <p>\n    In this new empty file, customise and add the following:\n  </p>\n\n  <p>\n    <code>set project your_project<br>hardmap %NEW_V3_ONION% your_website.com</code>\n  </p>\n\n  <p>\n    <em>(Note where it specifies 'V3'. We need a v3 onion address as these are what the SSL certificates will require. Earlier versions are shorter, possibly easier, but won't work with SSL)</em>\n  </p>\n\n  <p>\n    Save and exit that file.\n  </p>\n\n  <p>\n    Run the following:<br><code>./eotk config your_project.tconf</code><br>\n  </p>\n\n  <p>\n    This is going to generate the .onion address. Copy that and save it in a txt file somewhere for pasting into the Tor Browser, and for the SSL stage later.\n  </p>\n\n  <p>\n    We no longer need the tconf file, so remove that. Notice there's now a .conf file with the same name. The rest of the effort will go in there:<br><code>rm your_project.tconf</code>\n  </p>\n\n  <p>\n    Now let's start the new .onion website:<br><code>./eotk start your_project</code><br>\n  </p>\n\n  <p>\n    Go to the Tor browser and visit this brand new .onion address. Here's what will see if everything happened right:\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://treacherous.tech/media/posts/8/security-risk.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://treacherous.tech/media/posts/8/responsive/security-risk-xs.png 300w ,https://treacherous.tech/media/posts/8/responsive/security-risk-sm.png 480w ,https://treacherous.tech/media/posts/8/responsive/security-risk-md.png 768w ,https://treacherous.tech/media/posts/8/responsive/security-risk-lg.png 1024w ,https://treacherous.tech/media/posts/8/responsive/security-risk-xl.png 1360w ,https://treacherous.tech/media/posts/8/responsive/security-risk-2xl.png 1600w\"  height=\"196\" width=\"1256\" alt=\"\" />\n      \n    </figure>\n\n  <p>\n    This is fine. The Tor Browser, built on Mozilla's Firefox, is checking for Valid SSL certificates for the site to make a secure https connection. EOTK's nginx configuration defaults to https, and generates some default certificates that obviously won't match our site's brand new address. Since we know we made this website just now, we'll click the advanced button to \"accept the risk and continue\" and check out whether the website mirror is otherwise behaving normally. Remember to remove the exception from the browser when we're finished.\n  </p>\n\n    <h4 id=\"now-lets-make-https-work\">\n      Now let's make https work\n    </h4>\n\n  <p>\n    The tasks above worked for me quite fast (about 10 minutes). Sorting out SSL on .onions presented a slight learning curve, some Googling, and a few questions back and forth with Alec in the EOTK repo issue queue, and the Harica helpdesk, both of which were patient and helpful. It's worth pointing out that in that time, Alec has written up a blog post on this very topic, read that for the official version, and for how to better use the EOTK conf file, which I can already see lends itself to my more ultimate goal on how to wrap everything into a scriptable and quickly repeatable process.\n  </p>\n<hr class=\"separator separator--dots\" />\n\n  <p>\n    <strong>Read:</strong>&nbsp;<a href=\"https://alecmuffett.com/article/14735\" target=\"_blank\">Make your cleartext website #UNBLOCKABLE by adding a @torproject Onion address, using #EOTK and a HTTPS certificate from #HARICA</a>\n  </p>\n<hr class=\"separator separator--dots\" />\n\n    <h4 id=\"some-ssl-ranting\">\n      Some SSL ranting\n    </h4>\n\n  <p>\n    I'm now several years into being used to using <a href=\"https://letsencrypt.org/\" target=\"_blank\">Let's Encrypt</a> SSL for sites and haven't needed to go buy a certificate and deal with that whole manual validation process for a long time, and am sort of antagonistic about the whole thing. There are use cases for&nbsp;extended domain validation, getting that extra-verified&nbsp;<em>green bar</em> padlock or external validation \"circle-of-trust\" in the browser navigation bar, etc. I'm happy my bank has it. Facebook, Google, Amazon users should expect it. But I don't think it's necessary for the vast majority of the web. It's like buying air. Aside from making SSL free, to me the true gift of Let's Encrypt is the simplicity and the automation. But it doesn't run on Tor hidden service sites (yet).\n  </p>\n\n  <p>\n    Up until pretty recently, it seems the only SSL option for a .onion was <a href=\"https://www.digicert.com/dc/blog/ordering-a-onion-certificate-from-digicert/\" target=\"_blank\">Digicert</a>, with a price tag of $344 (not including tax) for a year of https. Possibly not what most people have budgeted for their blog, or underfunded news site or small, scrappy nonprofit organisation. Enter <a href=\"https://www.harica.gr/en/About/About\" target=\"_blank\">Harica.gr</a>, which drastically reduced the cost of entry to ‚Ç¨ 5.58. Harica is also <a href=\"https://www.gunet.gr/en/\" target=\"_blank\">funded by a nonprofit itself</a>, so with that small cost I feel like I'm actually paying for a service and funding someone to answer my potentially tedious questions.\n  </p>\n\n    <h4 id=\"okay-back-to-it\">\n      Okay, back to it\n    </h4>\n\n  <p>\n    In the EOTK directly, let's take some time to review the different commands (if not already done).<br><code>./eotk -help</code>\n  </p>\n\n  <p>\n    It's likely this is something useful to do at the start, but at this stage, we need to add some more things to our .conf file, restart EOTK once or twice and restart nginx at least once.\n  </p>\n\n  <p>\n    In Harica.gr, let's request a new certificate. Follow the steps there. We will need to validate the website. For this, I chose to generate my own csr instead of have Harica do it, and it's worth remembering this for later when we need to work on our .key file.&nbsp; Do the following to make a .csr file:<br><code>openssl req -newkey rsa:2048 -keyout your_site.key -out your_site.csr</code>\n  </p>\n\n  <p>\n    <mark><strong>IMPORTANT(!):</strong></mark> Save the password in your local txt file, we'll need it.\n  </p>\n\n  <p>\n    Submit the csr. Now Harica wants us to host a file on the site to complete the varification. Download that so we can copy the name and the content. Copy its name and content into the your_site.conf file.<br><code>nano your_site.conf</code>\n  </p>\n\n  <p>\n    Paste in something that will look like this. I'm doing this for just one website, so this is pretty small. There are great examples of how to mirror loads of .onions at once in the EOTK docs, so for those, this entry would be much longer.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>set ssl_proof_csv \\\n    /test,hello-world \\\n    /www/.well_known/pki-validation/FILENAME,CONTENT \n</code></pre>\n\n  <p>\n    I did reach out for help at this stage as various attempts weren't working out. <a href=\"https://github.com/alecmuffett/eotk/issues/89\" target=\"_blank\">You can see that here</a>. This <a href=\"https://github.com/alecmuffett/eotk/issues/91\" target=\"_blank\">other issue</a>&nbsp;on overhauling the SSL proof mechanism is also worth tracking, as I am wanting to make a lot of .onion sites at some point. The<code> /test,hello-world \\</code> argument is simply for us to test that our conf file is making urls right.\n  </p>\n\n  <p>\n    Save that .conf file and then run these:<br><code>./eotk config your_site.conf<br></code><code>./eotk restart your_site</code>\n  </p>\n\n  <p>\n    Go back to the Harica dashboard to see to the next part of the validation.&nbsp;\n  </p>\n\n    <h3 id=\"get-and-install-the-certificates\">\n      Get and install the certificates\n    </h3>\n\n  <p>\n    If the .onion site's validation checked out, then huzzah! We can now access the new files in the Harica dashboard. The certificates there will come in different formats. There's pem, der,&nbsp;PkCS#7 and a Pem Bundle. <strong>Download the Pem Bundle.</strong> We don't need the rest.\n  </p>\n\n  <p>\n    For the next bit, we need to make our encrypted key into a private key. Go back to where we'd made your .csr. and .key file. Do the following:<br><code>openssl pkcs8 -in your_site.key -out your_site-plain.key</code>\n  </p>\n\n  <p>\n    Now, we're off to the SSL directory to add our files.&nbsp;<code>cd eotk/projects.d/your_site.d/ssl.d/ </code>and add the <strong>your_site-plain.key</strong> and the <strong>.pem bundle</strong> you downloaded from Harica. Remove the default keys that were there, we don't need them, now.\n  </p>\n\n  <p>\n    Next, we're going to edit our nginx file to reflect the new files there. <code>cd ../ </code>to the <b>your_site.d</b> directory and open the <strong>nginx.conf</strong> file. In the<b>&nbsp;# SSL config</b> section, update the names of the pem and key files to your new ones, and be careful to keep the path the same. Save and close that.\n  </p>\n\n  <p>\n    Back in our EOTK directory, restart nginx:<br><code>./eotk nxreload treacherous</code>\n  </p>\n\n  <p>\n    Now go back to the .onion site in the Tor Browser and it should be working splendid.\n  </p>\n\n    <h3 id=\"final-notes\">\n      Final notes\n    </h3>\n\n  <p>\n    So, I'm pretty sure I took the long way around and there are a lot of good shortcuts, and demonstratively better uses of the .conf file to combine steps. I forgot to include a .www in this certificate. The latest changes in EOTK this week also include a lot of good SSL advice.\n  </p>\n\n  <p>\n    <strong>Laundry list:</strong>\n  </p>\n\n  <ul>\n    <li>I forgot to add a www version of the .onion address in the Harica SSl cert. You can make as many addresses as you want in the Harica dashboard fro your certificates. Could be useful for wildcards or running long lists of hidden service mirrors.</li><li>I understand (and agree with) the argument for driving people toward https on Tor hidden service sites, but think I'd it should be easier not to do this as an option until there's a Let's Encrypt option or something like it. I need to play more with EOTK to figure this out.&nbsp;</li><li>I think this entire process is scriptable, possibly in python. I'd like to run a cli that made this even more automated, and possibly removed some of the human gaffes from the process. Again, it would require a Let's Encrypt SSL solution to really work in one go.</li><li>Cloudflare could wrap this entire service into a back-end and render it as a switch in the user dashboard. This would then allow it to more easily white-list Tor traffic instead of treating it as suspect.</li>\n  </ul>\n\n  <p>\n    For my <i>actual</i> project, I'd like to see how I can batch as much of this into a single script as possible as I'd potentially like to create .onions for 100+ mirrors in a manageable way with some other requirements not worth going into here. While I recommend and appreciate Harica, for my project to scale sustainably, I'd need Let's Encrypt or some kind of variant of it to support .onions.\n  </p>\n\n  <p>\n    Anyway, hope it helped. Many thanks to Harica's helpdesk person and Alec Muffett for their kind assists. Anything in this post that may be incorrect or problematic is mine.\n  </p>\n\n  <p>\n    \n  </p>\n\n  <p>\n    Happy onions.\n  </p>",
            "image": "https://treacherous.tech/media/posts/8/Onion_garden-2.jpg",
            "author": {
                "name": "Yours Truly"
            },
            "tags": [
            ],
            "date_published": "2021-06-05T00:20:11+01:00",
            "date_modified": "2021-06-05T00:20:11+01:00"
        },
        {
            "id": "https://treacherous.tech/this-is-how-they-tell-me-the-world-ends.html",
            "url": "https://treacherous.tech/this-is-how-they-tell-me-the-world-ends.html",
            "title": "Review: &#x27;This is How They Tell Me The World Ends&#x27;",
            "summary": " The true stories rarely have happy endings. I finished my journey through \"This is How They Tell Me the World Ends\", a readable tour through the shady and yet still shadier parts of cyber weapons market by New&hellip;",
            "content_html": "\n  <p>\n    The true stories rarely have happy endings. I finished my journey through \"<a href=\"https://www.goodreads.com/book/show/49247043-this-is-how-they-tell-me-the-world-ends\" target=\"_blank\">This is How They Tell Me the World Ends</a>\", a readable tour through the shady and yet still shadier parts of cyber weapons market by New York Times journalist Nicole Perlroth. It's not such a spoiler to let you know that we're all the canon fodder in the ongoing escalation of nation states to corner access on hacking tools that can allow them to disable their adversaries. But as someone who casually pays attention to the market of offensive tech, this book offers a staggering breadth of coverage, introducing a wide cast of players on all sides.\n  </p>\n\n  <p>\n    It's readable and fast paced and Perlroth has a relatable narrative voice and also makes for a good central character navigating from one technology nightmare to the next. She's good at avoiding the technical jargon where it's not needed and explaining it where it's unavoidable. I think her short-cuts to educating readers on what are sometimes really complicated topics are like fingernails on a chalkboard to experts in cyber security fields, but this book isn't aimed at them. And it's better for it.\n  </p>\n\n  <p>\n    I decided to read the book actually after catching some critical reviews by people more on the engineering side of technology. One thing they had in common aside from being male was they hadn't actually gotten that far through it. I wonder if even finished. It's fast paced and at time reads a bit like a spy thriller though with occasional reminders that it's all happening, and by the way, the controls that run all of our water, electricity, telecommunications and more are online and not that terribly secure.&nbsp;\n  </p>\n<hr class=\"separator separator--dots\" />\n\n  <p>\n    <strong></strong><strong>Update:</strong> If you do want to read a detailed and well-written dive into the book's technical faults, <a href=\"https://foreignpolicy.com/2021/05/03/cybersecurity-ignorance-is-dangerous/\" target=\"_blank\">Tarah Wheeler has written this in Foreign Policy magazine</a>.\n  </p>\n<hr class=\"separator separator--dots\" />\n\n  <p>\n    There's a lot of inside baseball in the early chapters about the New York Times and how it operates on these kinds of stories, and how it plays well, or doesn't play well, with others. the book starts off with her involvement in reporting on the Snowden leaks of NSA programs, and there's no shortage of snark about The Guardian. But that soon gives way to a world tour of various hacker communities, brokers of the unpatched holes in your mobile's operating system, and national security experts whose names you may not see in the papers very much because they're actually doing the work.&nbsp;To be honest, if the book can make a general audience more interested in these kinds of issues, then I think that's a good thing overall.\n  </p>\n\n  <p>\n    It's one of these books that I think I'll hit again with the highlighter and the PostIt notes. It was around page 137, in the chapter called \"The Kurd\" that I started folding corners of pages to return to.&nbsp; It's not that if I leave a book completely un-ravaged that it was a bad read, but the highest honour my nonfiction reads have are to be well worn, with ugly misshapen spines from being left open, creases in the corners from bookmarking and little semi-legible notes in the margins.&nbsp;\n  </p>\n\n  <p>\n    In a nutshell, everything's exploitable if you look hard enough, long enough. And there are governments that will pay a lot of money to obtain this. The Snowden leaks showed some of this and how the NSA and GSHQ exploited this. Later on, through Wikileaks and others, we've all been able to learn about hacking tools of the CIA. These tools are exploited by Russia, China, Saudi Arabia, Israel, etc. against targets ranging from political leaders, corporate giants like Jeff Bezos to investigative journalists and human rights investigators. And often, such as attacks that hit things the NHS, the rest of us.\n  </p>\n\n  <p>\n    There are reasonable actions governments can take that governments can do, summarised in the books' closing. Don't run elections online. Patch software instead of hoarding these security holes for some potential use. Secure more infrastructure. Encourage people to use end to end encryption, or even set government limits on what's considered minimally secure instead of lobbying for back doors. Consider some kinds of rigorous standards for people put in places of high trust for securing the things we all use.\n  </p>\n\n  <p>\n    But it's a complexity trap. If you want to scale systems that growing numbers of people need (clean water, telecommunications, power grid management, etc.) then the place to do that is online. And once there, can't take it back off again. All this combined digital infrastructure that runs civilisation exists where it does for a reason: that's where It works. And that's where it's going to be attacked. Attackers can be wrong ever day, and keep trying. Defence can't be wrong any day.\n  </p>\n\n  <p>\n    The book focuses a lot on the 0day market. These are exploits that the makers of software don't know exist (and have had zero days to fix, get it?). It's an expensive market as these are harder to find than the loads of exploits that just exist because so many systems we rely on use outdated operating systems or built with old or unsupported code. The book gets into both of these kind of vulnerabilities, plus the human side of things, such as how social networks can game human perceptions for political ends. But the 0day industry is maybe the most symbolic of the whole trade. Bug hunters can either get paid thousands to turn them over to the companies that can fix them, or tens if not hundreds of thousands to sell them on to brokers that will sell them to governments for millions. Companies can't compete with that. I don't think some even really want to.\n  </p>\n\n  <p>\n    So read this one but there's a warning: You may start to appreciate the off-grid types in new ways.\n  </p>",
            "image": "https://treacherous.tech/media/posts/7/this-is-how.jpg",
            "author": {
                "name": "Yours Truly"
            },
            "tags": [
                   "books"
            ],
            "date_published": "2021-06-05T00:20:11+01:00",
            "date_modified": "2021-06-05T00:20:11+01:00"
        },
        {
            "id": "https://treacherous.tech/bypassing-online-censorship.html",
            "url": "https://treacherous.tech/bypassing-online-censorship.html",
            "title": "A little resource on bypassing online censorship",
            "summary": " Started a small resource page for people on how to deal with internet shutdowns that I'm calling The Detour.&nbsp; Shutdowns been in the news over the last week following the military coup in Myanmar, and the shutdown that&hellip;",
            "content_html": "\n  <p>\n    Started a small resource page for people on how to deal with internet shutdowns that I'm calling <a href=\"https://listed.to/@the_detour\" target=\"_blank\">The Detour</a>.&nbsp;\n  </p>\n\n  <p>\n    Shutdowns been in the news over the last week following the military coup in Myanmar, and the shutdown that happened there, and threats of it happening again in Iran. internet shutdowns are on the rise, and have long been a tool by regimes to stop organising happening internally or news getting out.&nbsp; <a href=\"https://www.hrw.org/world-report/2020/country-chapters/global-5\" target=\"_blank\">internet Shutdowns are on the rise</a>. We've already seen it happen in 2021. [In 2019]. In 2020 there were <a href=\"https://www.hrw.org/world-report/2020/country-chapters/global-5\" target=\"_blank\">83 documented shutdowns</a> in the world. A bit down from the <a href=\"https://www.accessnow.org/cms/assets/uploads/2020/02/KeepItOn-2019-report-1.pdf\" target=\"_blank\">213 shutdowns that happened in in 2019</a>, but still on the upward trajectory. There were 33 in 2018 and 25 the year before that.\n  </p>\n\n  <p>\n    I'll be moving on to include some resources on other kinds of internet censorship and how to work around it. The goal overall is to keep it end-user focused, though may add a post on the bigger, more involved projects. The other goal is to experiment with a pretty easy and sturdy way of publishing on the web.\n  </p>\n\n    <h3 id=\"what-the-detour-is-made-with\">\n      What 'The Detour' is made with...\n    </h3>\n\n  <p>\n    As I've noted in earlier posts on this blog, I'm interested in simple, sturdy and secure ways to publish online. Sites that don't need databases or login credentials. Site's with minimal code bases to maintain. I'm publishing this site using Publii and Github pages. The work happens through an app on my computer and then spits pages at a site hosted on Github. So The Detour is an experiment along these lines.\n  </p>\n\n  <p>\n    I'm a <a href=\"https://standardnotes.org/\" target=\"_blank\">Standard Notes</a> user. It's an extendable, open source text editor that's good for taking quick notes, editing, and storing information. It's open source, and can sync across devices and back-up in the cloud of your choice with strong encryption. I&nbsp;recently noticed that it has a simple blogging function that publishes on&nbsp;<a href=\"https://listed.to/\" target=\"_blank\">Listed.to</a>.&nbsp;\n  </p>\n\n  <p>\n    It's not an incredibly sophisticated publishing tool, but really easy for anyone to start, and the model is incredibly attractive if you wanted to extend it to a small team who could submit, review edit and publish using Standard Notes already existing encrypted sharing functions. It's much better than leaving unfinished drafts on a public website, or having to keep persistent connections to a web server while doing the research, writing and editing.\n  </p>\n\n  <p>\n    \n  </p>",
            "image": "https://treacherous.tech/media/posts/6/detour.png",
            "author": {
                "name": "Yours Truly"
            },
            "tags": [
                   "circumvention"
            ],
            "date_published": "2021-06-05T00:20:11+01:00",
            "date_modified": "2021-06-05T00:20:11+01:00"
        },
        {
            "id": "https://treacherous.tech/time-to-read.html",
            "url": "https://treacherous.tech/time-to-read.html",
            "title": "Time to read",
            "summary": " I used to have this mental game, back in the before times. On the packed overground train in the morning, when commuters are stuffed tight against one another with no room to breath, I'd imagine the space if&hellip;",
            "content_html": "\n  <p>\n    I used to have this mental game, back in the before times. On the packed overground train in the morning, when commuters are stuffed tight against one another with no room to breath, I'd imagine the space if it only contained one tenth the population, randomly pick 9 out of 10 to not exist and think what that commute might be like. I don't have to imagine that anymore. Taking the train on average once a month now, seeing 5 or fewer fellow commuters, wearing their masks, sitting apart from one another, still stuck in their minds like we all had been before.\n  </p>\n\n  <p>\n    There's room to sit on the train and read now. But no where to go.\n  </p>",
            "image": "https://treacherous.tech/media/posts/5/time-to-read.jpg",
            "author": {
                "name": "Yours Truly"
            },
            "tags": [
                   "life "
            ],
            "date_published": "2021-06-05T00:20:11+01:00",
            "date_modified": "2021-06-05T00:20:11+01:00"
        },
        {
            "id": "https://treacherous.tech/the-regime-that-the-internet-created.html",
            "url": "https://treacherous.tech/the-regime-that-the-internet-created.html",
            "title": "The regime that the internet created",
            "summary": " Howard Dean was the first American political candidate to use the internet as a vehicle to run a campaign. And his team was on to something. In 2002 his team working on the Democratic nomination for the 2004&hellip;",
            "content_html": "\n  <p>\n    Howard Dean was the first American political candidate to use the internet as a vehicle to run a campaign. And his team was on to something. In 2002 his team working on the Democratic nomination for the 2004 presidential election was pioneering the things that are all now bog-standard: campaign website, online donation pages and blogs. He also realised the purpose behind it all: You convert people into communities, not voters. Votes are a bi-product of generating communities. And people want to believe. Meetup.com was new, and the campaign used it to get people to throw house parties, or find groups to hang out with at the local <em>TGI Fridays</em> or whatever. The whole thing was geared toward meeting, bonding and agreeing with one another. Fun. It didn't work in the end. But it was a first iteration. Every major political campaign since built on the model, and there's now no such thing as a successful campaign that can't find its roots in it.\n  </p>\n\n  <p>\n    You could plot a course from Dean's use of nascent social media to how it had been used to span a beyond-control horde of MAGAheads storming the capitol 18 years later.&nbsp;\n  </p>\n\n  <p>\n    <a href=\"https://en.wikipedia.org/wiki/Christopher_Wylie\" target=\"_blank\">Chris Wiley's</a> book <em>Mindf*ck</em> plots the data scraping consultant's career exploiting demographic data and the social web to micro-target voters based on personas, starting with the Liberal Party in Canada before taking his trade to the Obama campaign and then on to the Liberal Democrats in UK before helping out both the UK referendum to quit the EU and the campaign to elect Donald Trump in the U.S. The supply chain of tactics is clear here, from friendly liberal Canadians to resurgent proto-fascist movements in the span of a decade or less.&nbsp;\n  </p>\n\n  <p>\n    People like to call&nbsp;<a href=\"https://en.wikipedia.org/wiki/Aaron_Swartz\">Aaron Swartz</a> \"The Internet's Own Boy.\" It's a good story. He was instrumental in a lot of things that have made the internet useful, educational, fun and open. At least the parts of the internet that are those things. And he was prosecuted and endlessly hounded for it. We can call the 45th president's single term the internet's own regime. It used the same tools, created communities, leveraged social media data to target messaging, and all together hit a nerve. So when people talk to you about the marvels of the internet age, sure it's pretty cool. We've created awesome ways for people to connect, work and socialise. And not an insignificant number of them can be instigated to use those tools to try to destroy democracy sometimes. This iteration failed.\n  </p>\n\n  <p>\n    \n  </p>",
            "image": "https://treacherous.tech/media/posts/4/atlantic-abomination.jpg",
            "author": {
                "name": "Yours Truly"
            },
            "tags": [
                   "politics"
            ],
            "date_published": "2021-06-05T00:20:11+01:00",
            "date_modified": "2021-06-05T00:20:11+01:00"
        },
        {
            "id": "https://treacherous.tech/new-year-new-blog.html",
            "url": "https://treacherous.tech/new-year-new-blog.html",
            "title": "New year; new blog",
            "summary": "Hello friend, Happy 2021 and thanks for keeping up with the ever evolving progression of this experiment. 2020 was the dumpster fire that gave more flame than than anyone could have expected, or would have asked for. Toward the&hellip;",
            "content_html": "<p>Hello friend,</p>\n<p>Happy 2021 and thanks for keeping up with the ever evolving progression of this experiment. 2020 was the dumpster fire that gave more flame than than anyone could have expected, or would have asked for. Toward the end of 2019, I'd ditched <a href=\"https://wordpress.org\" target=\"_blank\" rel=\"noopener noreferrer\">Wordpress</a> for <a href=\"https://gohugo.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Hugo</a> and went on to created all of 3 blog posts. It was an exhausting year. Working on other people's problems was more than enough. I mostly ignored my own.¬†</p>\n<p>This year, I'm starting with <a href=\"#INTERNAL_LINK#/post/null\" target=\"_blank\" rel=\"noopener noreferrer\">Publii</a>, which is an open source app that generates flat-sites. It's part of my continuing search for website publishing systems that securely keep the back end (the place where people create the content) away from the front end (where people show the content), are light on the server, and easy on the user. Wordpress has become bloated and too much of an attack target. The CMS is borderline adware and the \"community\" of developers is becoming more of a flea market of poorly constructed design themes and plugins that are patchy, bloated and hackable.<a href=\"https://getpublii.com/\" title=\"publii\" target=\"_blank\" rel=\"noopener noreferrer\"></a></p>\n<p>Hugo was all right. Create and edit posts in a text file and then with a few commands new content is up on the website. It's easy to secure, can run blazingly fast websites and be hosted nearly anywhere, lowering costs amazingly. Ticked a lot of my static-site requirements. Except one. It isn't for end users, or at least how I define them. An end user is someone who wants to open an app, type their content, hit save or publish and see it on the site. Wordpress does this, just horribly from every other point of view. But it's what people expect. Hugo, <a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Jekyll</a>, <a href=\"https://scotch.io/tutorials/top-10-static-site-generators-in-2020#toc-1-gatsby\">Gatsby</a> and the like are for people who want to endlessly tinker with code and templates and refine their git workflows. They just move the complexities elsewhere.¬† So, I'm trying out Publii, which is in an app. It's doing a lot of things those other static site generators are doing, but the user doesn't need to see them or carry out each operation. It also opens with a wysiwyg editor that authors will expect, and somewhat obvious settings and configuration options. There seems to be not much of a developer or designer community to speak of, though.</p>\n<p>So like each time I do this, I start out minimal, and wipe what came before. I believe in the permeable web, the volatile one. The web that forgets. The non-centralised, federated services one. Sure, we need that archiving internet, the one with tracking and accountability for our governments, leaders (be they political, corporate, religious or social) and all these caches, backups and searchable systems that keep the receipts. For a lot of the rest of us, though, we need one that is more like a sand mandala. Something that gives us the privacy, security, and most importantly, the space to experiment and either maintain, iterate or wipe: no harm; no foul.</p>\n<p>Unfortunately, the inverse is more commonly the case. Kids say dumb things on Instagram and it chases them into the starts of their careers. Videos meant for one set of eyes get immortalised for all eyes for all time. Humans aren't designed for the web we have. It's not sense in blaming the user. It makes as much sense as blaming jellyfish for beaching themselves on the outgoing tide. The situation moves faster than our survival instincts. We should still be sitting somewhere in a savannah staring into the middle distance with an expression that implies more significant thought than what's really going on. Parts of our brains have developed a world that other parts of our brains can'd deal with. So cut yourself some slack. You aren't even supposed to be here today. None of us are.</p>\n<p>We're still calling the site Treacherous Tech, because the it still suits the overall point: The promises of a gloriously interconnected world of social media, IoT sex toys and door bells that can spy on the comings and goings in front of your house all come with ToS catches. There are stings attached, monetisation efforts and ever expanding threat surface. We inflict¬† all this on ourselves in order to have dopamine rushes from people clicking <span style=\"color: #e03e2d;\">‚ô•Ô∏è</span> on our selfies and to get garlic peelers on the same day we click the order button. Technology keeps its promises, so be sure you know what it's promising.</p>\n<p>But I digress.</p>\n<p>I already prefer the editing interface of publii. It's a little buggy and unfinished in parts. It feels more like a word processor than a CMS. I like that the drafts are mine, here on this local machine, before I publish them on some server somewhere, even in draft mode. I like that I don't need to launch the terminal and manually chug through git processes just to make each blog post. It's got a slightly wonky interface and I don't think all the buttons are labeled that well, and I think it could benefit from some usability love, but early days.</p>\n<p>I'm using the default theme this CMS comes with (there aren't many alternatives), so don't expect much on that front. I don't care much how it looks. It's just a thing to write into. A bit more FOSS and self-hosted than Medium. A bit less faff than a Wordpress or Drupal or Hugo site. I think it needs work, but it is definitely suitable for a single-person blog. It's kind of the slacker option.</p>\n<p>It's a new year, and I'm taking the easy route. There's enough going on with a pandemic, a Brexit, some chump in the White House who can't take a hint. Another year or so in doors. Go easy on yourself, too.</p>\n<p>Happy new year,</p>\n<p>Yours truly.</p>",
            "image": "https://treacherous.tech/media/posts/1/tumblr_p5hrv8fPab1skkfpco2_1280.jpg",
            "author": {
                "name": "Yours Truly"
            },
            "tags": [
                   "meta"
            ],
            "date_published": "2021-06-05T00:20:11+01:00",
            "date_modified": "2021-06-05T00:20:11+01:00"
        }
    ]
}
