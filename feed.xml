<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>treacherous.tech</title>
    <link href="https://treacherous.tech/feed.xml" rel="self" />
    <link href="https://treacherous.tech" />
    <updated>1970-01-01T01:00:00+01:00</updated>
    <author>
        <name>Yours Truly</name>
    </author>
    <id>https://treacherous.tech</id>

    <entry>
        <title>Happy 2022: Quit more</title>
        <author>
            <name>Yours Truly</name>
        </author>
        <link href="https://treacherous.tech/happy-2022-quit-more.html"/>
        <id>https://treacherous.tech/happy-2022-quit-more.html</id>

        <updated>2022-01-17T23:02:03+00:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://treacherous.tech/media/posts/16/uhffszjrfec51.webp" alt="" />
                    Happy new year. It's a new year and I somehow feel obligated to make a blog post to mark that even though I kind of have writer's block and can't think of anything to write about. Fortunately, this is&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://treacherous.tech/media/posts/16/uhffszjrfec51.webp" alt="" />
                <p class="dropcap">Happy new year. It's a new year and I somehow feel obligated to make a blog post to mark that even though I kind of have writer's block and can't think of anything to write about. Fortunately, this is a blog, and doesn't really have to be about much anything.</p>
<p>It's around this time of year I like to take stock of my online presence and various hard drives and see what to keep, delete, or wipe and repeat. One of the nice things about using a password manager and app-based 2FA is that you can keep a nice running list of all the online accounts you've got. <a href="https://keepassxc.org/" target="_blank" rel="noopener noreferrer">KeePassXC</a> tells me how many hundreds of accounts I have floating around. If you want to both strengthen your use of passwords and start and audit of all the places you have an account, set up a password manager, and as you use each account, reset the password to some random 32+ character monster you'll never remember, and keep a record of where you're going online at the same time. The best way to start with a password manager is to just set one up and go. Instead of trying to add all your accounts in one go (if you have a lot of them) just add them as you visit the websites. In about a month, you'll have the majority (if not all) of your important accounts. So there's a new year's PSA for you.</p>
<h3>The website</h3>
<p>I'm temporarily closing some buggy things. Closed the onion mirror of this blog and the onionshare contact form for a bit until I can make these things more stable. Will also be looking for a flat-site generator to replace Publii, which started strong, but the bugs are becoming kind of annoying. It edits kind of wonky. Select text to delete and it deletes the paragraph above. Weird. </p>
<h3>Online accounts</h3>
<p><strong>Delete: </strong>Amongst many things, Slack. A few years ago I went from 0 to 8 Slacks in just a couple of months, and I currently use 1 of them, and not even that frequently. The one I controlled was easy. As an administrator, I just deleted it. But depending on the version of Slack being used, you may or may not be able to simply opt out. To remove myself from some, I need to contact the administrator. On at least one, I'm sure they've gone AWOL. You shouldn't have to talk to anyone to remove yourself from an online service. Slack was supposed to put an end to emails. It just created a deluge of meaningless chatter. No new Slacks. And need to post in existing ones I want out. </p>
<p><strong>Keep:</strong> From the collection of digital collateral to roll on with, I'll stick with Publii, the app I'm using to make this blog. It's still glitchy and unfinished, and I can't yet justify using a premium version of it until they make this one work right, but it's maybe the best open source tool for throwing a simple, flat website on the web. Publii, Github and a reasonable domain management service are all that are running this show. The only thing I'm paying for is the domain.</p>
<p><strong>Wipe and repeat</strong>: I keep some Protonmail addresses, and will even add one to the contact page here soonish. Unless you're also chatting with it using a Protonmail account as well, I don't particularly rate it as greatly enhancing security, and the spam/junk filtering is crap. I do regular wipes of the account though, and some people still want to send an email.</p>
<h3>Socials</h3>
<p>I quite Facebook a couple of years back, and have not really missed it. In fact, it immediately made checking in on the web better. Am still in the metaverse via Insta and WhatsApp, but single-use apps are where its at. Quit more social sites, or understand why you're on them. Actually, here I recommend <a href="https://twitter.com/anildash/status/1477313627598299137" target="_blank" rel="noopener noreferrer">Anil Dash's resources</a> on how to wipe your social accounts for new years and new starts. I'm just about to check out a Glitch app on how to "KonMari" Twitter followers <a href="https://glitch.com/~tokimeki-unfollow" target="_blank" rel="noopener noreferrer">here</a>, and highly recommend the process. I usually do this manually, but am happy to see something that makes the process more interesting.</p>
<h3>2022 digital resolutions</h3>
<ul>
<li><strong>Quit more.</strong> Close more accounts, and make my web more ephemeral. I tend to be a volatile user, but I create lots of accounts often just to see what the shiny looking thing does. My goal this year is to close more online things than I open. Quitting another one of the big companies is still on my list. I still have some Amazon and Google services running and would be happy to move off.</li>
<li><strong>Blog more.</strong> I wrote maybe 6 things last year (no, I'm not counting). Blog shorter, care less about form and style and be a bit more creative and messy (if you can believe it). </li>
<li><strong>Tech less.</strong> I've downsized my devices in the last couple of years, and could still do some more culling. Like everything else, each thing should be justifying its existence in the horde. </li>
</ul>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>This site is basically always a test site... now here&#x27;s some AI generated images</title>
        <author>
            <name>Yours Truly</name>
        </author>
        <link href="https://treacherous.tech/this-site-is-basically-always-a-test-site.html"/>
        <id>https://treacherous.tech/this-site-is-basically-always-a-test-site.html</id>
            <category term="meta"/>

        <updated>2022-01-17T23:02:03+00:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://treacherous.tech/media/posts/15/The_source_TradingCard.jpg" alt="" />
                    I broke the git workflow again. It's pretty easy to do. So I think I fixed it, and I'm testing it out. Here's some AI generated wombo.art made based on some text I typed into it. Did I make&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://treacherous.tech/media/posts/15/The_source_TradingCard.jpg" alt="" />
                <p>I broke the git workflow again. It's pretty easy to do. So I think I fixed it, and I'm testing it out. Here's some AI generated <a href="https://app.wombo.art/">wombo.art</a> made based on some text I typed into it. Did I make the art, or a machine, or some mechanical turks toiling away somewhere for pennies? Can I turn them into NFTs? What's the creator control in this (not considering ToS for the time being). From where comes the actual source material, and how much is sampled? I sense a big growth in all this and also many, many legal battles.</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-columns="3">
<figure class="gallery__item"><a href="https://treacherous.tech/media/posts/15/gallery/Brexit_TradingCard.jpg" data-size="939x1516"><img loading="lazy" src="https://treacherous.tech/media/posts/15/gallery/Brexit_TradingCard-thumbnail.jpg" alt="Brexit" width="720" height="1162"></a>
<figcaption>Boris Johnson eating gammon in a field of red poppies</figcaption>
</figure>
<figure class="gallery__item"><a href="https://treacherous.tech/media/posts/15/gallery/eye_cell_TradingCard.jpg" data-size="936x1508"><img loading="lazy" src="https://treacherous.tech/media/posts/15/gallery/eye_cell_TradingCard-thumbnail.jpg" alt="Too many eyes watching in prison" width="720" height="1160"></a>
<figcaption>Eye Cell</figcaption>
</figure>
<figure class="gallery__item"><a href="https://treacherous.tech/media/posts/15/gallery/source_meeting.jpg" data-size="938x1524"><img loading="lazy" src="https://treacherous.tech/media/posts/15/gallery/source_meeting-thumbnail.jpg" alt="Source Meeting" width="720" height="1170"></a>
<figcaption>A meeting in the rain to exchange documents in autumn</figcaption>
</figure>
<figure class="gallery__item"><a href="https://treacherous.tech/media/posts/15/gallery/The_hunger.jpg" data-size="939x1507"><img loading="lazy" src="https://treacherous.tech/media/posts/15/gallery/The_hunger-thumbnail.jpg" alt="The hunger" width="720" height="1156"></a>
<figcaption>Carnivorous rabbits in a humid jungle at night</figcaption>
</figure>
<figure class="gallery__item"><a href="https://treacherous.tech/media/posts/15/gallery/the_pirates_TradingCard.jpg" data-size="941x1520"><img loading="lazy" src="https://treacherous.tech/media/posts/15/gallery/the_pirates_TradingCard-thumbnail.jpg" alt="The Pirates" width="720" height="1163"></a>
<figcaption>Pirates fighting business men at sea</figcaption>
</figure>
<figure class="gallery__item"><a href="https://treacherous.tech/media/posts/15/gallery/The_source_TradingCard.jpg" data-size="928x1516"><img loading="lazy" src="https://treacherous.tech/media/posts/15/gallery/The_source_TradingCard-thumbnail.jpg" alt="The Source" width="720" height="1176"></a>
<figcaption>A source encrypting files for a journalist</figcaption>
</figure>
<figure class="gallery__item"><a href="https://treacherous.tech/media/posts/15/gallery/umbrella_TradingCard.jpg" data-size="929x1511"><img loading="lazy" src="https://treacherous.tech/media/posts/15/gallery/umbrella_TradingCard-thumbnail.jpg" alt="Umbrella" width="720" height="1171"></a>
<figcaption>umbrella under a street lamp</figcaption>
</figure>
</div></div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Testing on production (again)</title>
        <author>
            <name>Yours Truly</name>
        </author>
        <link href="https://treacherous.tech/test-on-prod.html"/>
        <id>https://treacherous.tech/test-on-prod.html</id>
            <category term="meta"/>

        <updated>2022-01-17T23:02:03+00:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://treacherous.tech/media/posts/14/doc-frankenstein.jpg" alt="" />
                    November: I did it again. September: I killed my blog the other day. That's not why I haven't been posting so much. I mean, you can look at the date of the last post and realise my lack of&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://treacherous.tech/media/posts/14/doc-frankenstein.jpg" alt="" />
                <p><strong>November:</strong></p>
<p><span style="color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit;">I did it again.</span></p>
<p><strong style="color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit;">September:</strong></p>
<p>I killed my blog the other day. That's not why I haven't been posting so much. I mean, you can look at the date of the last post and realise my lack of blogging isn't down to technical difficulties.</p>
<p>In other news, someone also unplugged my Raspberry Pi, killing some of my onion services. It was a whole thing, not worth getting into. Anyway, rebuilt it and now just seeing if my local repo is still connecting to my Github Pages via this Publii app so I can go back to ignoring it again for the usual reasons.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Notes on Apple&#x27;s CSAM scanning announcement</title>
        <author>
            <name>Yours Truly</name>
        </author>
        <link href="https://treacherous.tech/apple-csam-scan.html"/>
        <id>https://treacherous.tech/apple-csam-scan.html</id>

        <updated>2022-01-17T23:02:03+00:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://treacherous.tech/media/posts/13/stays-on-your-iphone.jpg" alt="iPhone slogan: What Happens on your iPhone stays on your iPhone." />
                     (Or: "Screeching voices from the minority")&nbsp; Last week (on Thursday, 5 August) Apple announced planned changes to its operating systems and iCloud services that have (re)ignited debates on the limits of security, privacy and safety. In a nutshell:&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://treacherous.tech/media/posts/13/stays-on-your-iphone.jpg" alt="iPhone slogan: What Happens on your iPhone stays on your iPhone." />
                
    <h2 id="or-screeching-voices-from-the-minoritynbsp">
      (Or: "Screeching voices from the minority")&nbsp;
    </h2>

  <p>
    Last week (on Thursday, 5 August) Apple announced planned changes to its operating systems and iCloud services that have (re)ignited debates on the limits of security, privacy and safety. In a nutshell: Apple announced it plans to update all Apple devices with the capability to automatically scan images as they are backed up in iCloud against a database of known child sexual abuse material (CSAM) that is managed by&nbsp;the National Center for Missing &amp; Exploited Children (NCMEC). Apple is also rolling out changes to accounts registered to children, in which iMessage images sent or received will also be scanned (client side, meaning on the device itself, not the server) for sexual material, and Apple would ping the kid's folks when it hits a positive.
  </p>

  <p>
    <strong>Before moving on, here's my pithy take</strong><strong>:</strong> this amounts to a backdoor. It bypasses encryption and both device and account security. It introduces a significant shift in Apple's priorities and previously stated business interests away from a brand based on user-centric privacy and security. Instead, we have what could be seen from a marketing point of view as "family friendly," while also finding ways to end arguments it's been having with various interest groups and U.S. federal agencies. It's dangerous at the user level, will do little to actually thwart the problems it aims to solve and globally, it introduces a dangerous precedence.
  </p>

  <p>
    As a technologist working with media, human rights and anti-corruption groups globally and as a parent with a keen interest in child safety locally, I've got a good amount of skin in this game. I wouldn't want this level of invasion on devices run by either my kid, my work contacts, or myself. That said, The issue of CSAM is absolutely and indisputably a high priority, and while I have seen many well-reasoned and insightful points made from both sides of this debate, I've also come across more than a few really horrible takes. More on that later. First, here's a smattering of the different arguments put forward by people with deeper thinking on the matter than yours truly...
  </p>

    <h3 id="some-links">
      Some links
    </h3>

  <ul>
    <li><strong>Apple -&nbsp;<a href="https://www.apple.com/child-safety/" target="_blank">Expanded Protections for Children</a><br></strong>It makes sense to start here as it's to what everything that will follow is responding. In this, we're not getting into the parts on "Communication safety in Messages" or "Expanding guidance in Siri and Search" which are all, in the end, some reporting tools and safety messaging aimed at minors. The part to&nbsp; look at is on CSAM detection. Skip the marketing text and get down to the "More Information" section. Check out the PDF called "CSAM Detection — Technical Summary" and the three technical summaries to get Apple's implementation of all this.<br><br></li><li><strong>NCMEC - <a href="https://www.missingkids.org/blog/2019/post-update/end-to-end-encryption" target="_blank">End-to-End Encryption: Ignoring Abuse Won't Stop It</a><br></strong>The National Center for Missing &amp; Exploited Children maintains the CSAM database Apple would use. I did not find (in my only couple-minutes search) an official statement on the current issues around its collaboration with Apple, but the above was written in 2019, is still prominently featured from the organisation's homepage, and reflects its general stance on all these issues. As the other main player in this story, its views should be seen and understood. I don't think anyone on either side of the debate has any issue with its central cause, thinks its trivial or not important, or has any interest in defending or protecting abusers.&nbsp; In fact, many people who are knowledgeably criticising Apple's implementation of this database actively work in safety and protection of numerous at-risk groups.<br><br></li><li><strong>Ben Lovejoy in 9to5mac -&nbsp;<a href="https://9to5mac.com/2021/08/05/scanning-for-child-abuse-images/" target="_blank">Opinion: Four problems with Apple’s reported approach to scanning for child abuse images</a><br></strong>I don't know who Ben is really, or follow this site much but here's a post that lays out a clear overview of many of the main concerns with client-side scanning and this sort of backdoor, or side-door, to your supposedly private and encrypted content on your Apple device. I think of many things I've read, this one is very accessible and gives someone with a casual interest a quick glance of the concerns.<br><br></li><li><strong>Various experts - <a href="https://appleprivacyletter.com/" target="_blank">An Open Letter Against Apple's Privacy-Invasive Content Scanning Technology</a><br></strong>Signed by leading experts in fields of security, safety, privacy, cryptography, researchers and legal experts, this one summarises the concerns raised by organisations such as  Electronic Frontier Foundation,&nbsp; Center for Democracy and Technology,&nbsp; Open Privacy Research Society and others.<br><br></li><li><strong>EFF -&nbsp;<a href="https://www.eff.org/deeplinks/2021/08/apples-plan-think-different-about-encryption-opens-backdoor-your-private-life" target="_blank">Apple's Plan to "Think Different" About Encryption Opens a Backdoor to Your Private Life</a><br></strong>Though linked to in the above letter, the&nbsp;Electronic Frontier Foundation's arguments against client-side and (this kind of) iCloud content scanning deserves it's own mention. What is good about this one is its international focus, and the wide ranging implications of this being built into technology for people living under more totalitarian/authoritarian regimes. If you can use hashed datasets to scan for one kind of content, you could use them for many kinds. And if you don't want to do that, maybe rule out operating in large markets around the world. Once opened, the door only swings more widely. To be honest, this is the area in which my day job sits, so the one that gets more of my attention. American's can shout about their constitutional rights and suchlike, fine. I'm interested in users who are depending on the technology they can access being engineered as though they should have those rights, too. If that helps those of us in "the West", it's a nice bonus.<br><br></li><li><strong>Alec Muffet - <a href="https://alecmuffett.com/article/14860" target="_blank">So @pwnallthethings decided to try calling out @wcathcart and @WhatsApp as “scanning content” like Apple; here’s why that’s incorrect &amp; misleading</a><br></strong>There's a load of <a href="https://en.wikipedia.org/wiki/Whataboutism" target="_blank">whatabouttery</a>&nbsp;already flying around on this topic, and I'm not going to link to or get into all (or even most) of it, but here's a thoughtful example and a reasoned response, both from people who are respected experts on these issues.&nbsp; And you can find a good exchange on Twitter between the two of them, if that's your thing. People have made similar whataboutism cases about Google, Kaspersky, etc. Many of these actually aren't good comparisons for one reason or another, but even if they were, the "other companies are doing it" argument is a pretty bad one. Something about that annoying thing your parents may have asked you regarding all your friends jumping off tall, dangerous things applies here.</li>
  </ul>

    <h3 id="for-what-its-worthnbsp">
      For what it's worth&nbsp;
    </h3>

  <p>
    My take is that Apple is backing off its promises in the thornier area of privacy and user security, and going more towards family, safety and things that give people warm and squishy feelings. It's own supposedly tightly controlled app store <a href="https://www.washingtonpost.com/technology/2021/06/06/apple-app-store-scams-fraud/" target="_blank">is filthy with scamware</a>.&nbsp;Also, there remains <a href="https://www.theguardian.com/news/2021/jul/18/what-is-pegasus-spyware-and-how-does-it-hack-phones" target="_blank">still unknown exploits in iOS, leveraged by the NSO Group's Pegasus spyware</a>.&nbsp;And if you're a security researcher digging in the wrong way, <a href="https://www.theverge.com/2020/1/3/21047275/apple-corellium-dmca-lawsuit-copyright-research-jailbreak-security-copyright" target="_blank">Apple may just see you in court</a>. In this particular case, in an internal Apple mailing message&nbsp;from&nbsp;NCMEC's executive director of strategic partnerships, critics of allowing constant content monitoring were dismissed as "<a href="https://twitter.com/evacide/status/1423748333001080833/photo/1" target="_blank">screeching voices of the minority</a>." No one who can speak for Apple has objected to this description.
  </p>

  <p>
    <strong>Perpetrators will bypass this:</strong> This turn toward the "nothing to hide; nothing to fear" crowd is chilling. The CSAM database is a list of cryptographic hashes -- "fingerprints" of the original horrendous content. If an image triggers a positive hit, the authorities can be contacted, or someone can be tasked to review content to confirm it's legitimate. And here's where we start going into the complex rabbit warren. If the fingerprints are too precise, the sick bastards who peddle them can easily work around it. They can change the image format, shave off a pixel or two in the width or height, alter the colour or any number of things. In order to work, hashes need to be what's called "fuzzy," or approximate, so something close enough can trigger it.&nbsp;
  </p>

  <p>
    <strong>Legitimate, private content will be viewed by more people, thus more users have lost their privacy, and more content is is at risk of misuse:</strong> The more this fingerprinting is made approximate, the more false alarms go off, so the more people and processes will be needed to review them. So these legal, private images are being seen by more people, and the number of people that have to be trusted to not be bad actors or sloppy at their work or a target for an attack grows.
  </p>

  <p>
    <strong>New methods of attack: </strong>There's also the problem of an easy attack vector. Anyone can send anyone a WhatsApp message and WhatsApp and iMessage (maybe others) media automatically backs up to iCloud. Anyone can send anyone else an image they never asked for that triggers a positive match. This may seem insane, or at least like an "edge case" proposition. I want you to consider people who are not people you know who deal with threats from regimes or corrupt entities you will likely never have to deal with. If I wanted to discredit a political dissident or rival candidate, it's an option. Shut down an anti-corruption case? Dirty up the reputation of a journalist? You betcha.
  </p>

  <p>
    <strong>New use cases:</strong> I'm not being original on this one, but once this exists as infrastructure, it has to have new use cases. It's almost a law of physics. If I were a government that had a large iPhone user base, so large that losing that market would be painful, I might have my own database of media file hashes I'd want scanned. Maybe it's memes making fun of leaders, or documents that I don't want the public sharing or seeing. Maybe if you don't run my database in my country, and follow my laws with technology you obviously have that makes it trivial to do so, it gets harder to sell iPhones, or for your in-country offices to not get raided.
  </p>

    <h3 id="meanwhile">
      Meanwhile...
    </h3>

  <p>
    So, it would be great if Apple worked with the broader security community on these things. It would also be groovy if some who fancied themselves as "purists" would lay off the "Perfection of Panopticon" act and considered the world as it is.
  </p>

  <p>
    Finally, the really unhelpful counter-argument is to do nothing.&nbsp; The "Why don't parents just pay better attention to their children" thing&nbsp; doesn't fly, and guess what? We live in a society. Why don't people do all kinds of things that they should? We wouldn't 3rd and 4th wave pandemic lockdowns, insane climate disasters, or regimes violating treaties on the use of chemical weapons.
  </p>

  <p>
    Part of the reason Apple is doing what it's doing is that there are segments of public and private sectors, and just the public in general, asking for something to be done. Like it or not, something will be done. Eventually something is always done. My argument would be that investment is better placed in existing, under-funded, under-resourced policing and the use of advanced, warranted and targeted surveillance of these networks of abusers, possibly with the use of taxes these companies should be paying... as a start.
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Pegasus notes</title>
        <author>
            <name>Yours Truly</name>
        </author>
        <link href="https://treacherous.tech/pegasus-notes.html"/>
        <id>https://treacherous.tech/pegasus-notes.html</id>
            <category term="spyware"/>

        <updated>2022-01-17T23:02:03+00:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://treacherous.tech/media/posts/12/pegasus.jpg" alt="" />
                     Pegasus mobile phone hacking software has been the week's big news again, following a leak of a list of 50,000 mobile phone numbers, alleged to be active or potential targets of some of the 50 nation state clients&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://treacherous.tech/media/posts/12/pegasus.jpg" alt="" />
                
  <p>
    Pegasus mobile phone hacking software has been the week's big news again, following a leak of a list of 50,000 mobile phone numbers, alleged to be active or potential targets of some of the 50 nation state clients of its maker, the Israel based NSO Group. Investigated by the&nbsp;Organized Crime and Corruption Reporting Project (OCCRP), some of the mobiles from the list have indeed been found to be infected with Pegasus spyware, and the consortium of organisations investigating the data, including Washington Post, Amnesty International The Guardian, PBS, Haaretz, etc. have been publishing articles all week since the news dropped. Making the list are a number of journalists, human rights activists, civil society leaders, political figures and even a few heads of state.
  </p>

  <p>
    The following are just some links and notes that maybe others find interesting and which I can put somewhere that's not my messy Twitter feed. More will likely be added here in the coming days and weeks. Watch this space.
  </p>
<hr class="separator separator--dots" />

    <h3 id="some-links">
      Some links
    </h3>

  <ul>
    <li><a href="https://www.occrp.org/en/the-pegasus-project/" target="_blank">OCCRP's 'The Pegasus Project' investigation and archive</a>.</li><li><a href="https://www.theguardian.com/news/series/pegasus-project" target="_blank">The Guardian's collection of Pegasus Project news</a>.</li><li><a href="https://github.com/mvt-project/mvt" target="_blank">The Mobile Verification Toolkit</a>. This was developed by the Amnesty International Security Lab as a forensics tool to look for signs of Pegasus software, and is not intended for those without some technical background.</li><li><a href="https://blog.cryptographyengineering.com/2021/07/20/a-case-against-security-nihilism/" target="_blank">A case against security nihilism</a>, by&nbsp;Matthew Green.&nbsp; Maybe one of the more important links in the list. It's easy to look at all this and think there is no hope. There is hope. <em>They</em> (whoever or whatever "they" is for you) are not all powerful. You are not powerless.&nbsp;</li><li><a href="https://cdn.occrp.org/projects/project-p/#/" target="_blank">Explore the data as OCCRP releases it</a>.</li><li><a href="https://www.amnesty.org/en/latest/research/2021/07/forensic-methodology-report-how-to-catch-nso-groups-pegasus/" target="_blank">Forensic Methodology Report: How to catch NSO Group’s Pegasus</a>, by Amnesty International's Security Lab<br></li>
  </ul>
<hr class="separator separator--dots" />

    <h3 id="some-notes-amp-asides">
      Some notes &amp; asides
    </h3>

  <p>
    That NSO Group is an Israeli company is an important fact in the story. Just like it was important that The Internet Research Agency was a Russian troll farm, or Hacking Team was Italian, based in EU. NSO Group is a direct outgrowth of the IDF. The NSO Group's technical support for tyrannical regimes around the globe to target their opponents, critics and observers is directly tied to Israel's continued occupation of Palestine. When people say the occupation is a laboratory, things like Pegasus are the exports. Tested in Gaza and West Bank, deployed by anti-democratic paranoid regimes against their critics.
  </p>

  <p>
    NSO Group <a href="https://www.forbes.com/sites/thomasbrewster/2016/08/25/everything-we-know-about-nso-group-the-professional-spies-who-hacked-iphones-with-a-single-text/?sh=656e910b3997" target="_blank">has a symbiotic relationship with Israel's Unit 8200</a>, a signals intelligence wing of the IDF. Talent and tools <a href="https://www.haaretz.com/israel-news/tech-news/idf-vs-nso-8200-battle-israel-cyber-talent-getting-dark-1.9929433">flow both ways</a> in this relationship. <a href="https://twitter.com/iblametom/status/1417872410246885388">The company claims</a> that its spyware is only used for "legitimate criminal and anti-terrorism investigations." The company also claims it has no control how its software is used and no access to its client's data, so one thing or the other or both are false.&nbsp;&nbsp;It sells to governments known for obsessive levels of human rights violations. If you sell guns to on-the-record sociopaths and serial killers, you can't claim ignorance in how they'll be used. <br>
  </p>

  <p>
    Knowledge of how the NSO Group's software has been used by regimes to target critics is not new, but the current information about it is more sweeping than ever before. There will be a lot of misinformation and disinformation in the coming days and weeks as countries deny spying, NSO Group denies everything, and hyperbole sometimes takes over instead of fact. Read or watch carefully.
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>The machine in the middle</title>
        <author>
            <name>Yours Truly</name>
        </author>
        <link href="https://treacherous.tech/tails.html"/>
        <id>https://treacherous.tech/tails.html</id>
            <category term="yolo tech"/>

        <updated>2022-01-17T23:02:03+00:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://treacherous.tech/media/posts/11/usb.jpg" alt="USB stick closeup" />
                     Create a weigh station to open strange files from the internet. Here's another instalment in our irregular YOLO tech series. If you've been following the news, then you'll be up on the latest about Israeli spyware vendor NSO&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://treacherous.tech/media/posts/11/usb.jpg" alt="USB stick closeup" />
                
    <h3 id="create-a-weigh-station-to-open-strange-files-from-the-internet">
      Create a weigh station to open strange files from the internet.
    </h3>

  <p>
    Here's another instalment in our irregular <a href="https://treacherous.tech/yolo-tech/">YOLO tech</a> series. If you've been following the news, then you'll be up on the latest about Israeli spyware vendor NSO Group, <a href="https://www.occrp.org/en/the-pegasus-project/" target="_blank">which licenses its Pegasus intrusion software</a> to various corrupt regimes and dictators to target human rights activists, political opponents, civil society leaders <a href="https://cdn.occrp.org/projects/project-p/?_gl=1*3exyzb*_ga*MTYzNzgzNjE4NC4xNjIwNjUzODA0*_ga_NHCZV5EYYY*MTYyNjgxNDU3Mi45LjEuMTYyNjgxNDYwNC4yOA..#/professions/journalist" target="_blank">and journalists</a>.&nbsp; This kind of thing is why <a href="https://treacherous.tech/yolo.html">YOLO devices</a> -- those gadgets you want to connect with the unwashed and the unknown -- should exist. They can be the expendable team. The tech that can take the hit without bringing everything else down.&nbsp; Here's a work station you can use to open files you get from strangers on the internet and when your done with your work, easily wipe it before using it ever again.
  </p>

  <p>
    In an <a href="https://treacherous.tech/hosting-a-secure-contact-form.html">earlier post</a>, we looked at how a journalist can create a secured, anonymous way for sources to send files and messages using Onionshare on a Raspberry Pi. Receiving files, though, is just the first thing. What happen they start landing? In may ways, if you've done this, you haven't solved a problem so much as you've invited more of them into your life. Sorry 'bout that. What you'll now want is a secure way to check your Onionshare device, initially examine the files on it, and figure out what to do with them. So, our next piece of <a href="https://treacherous.tech/yolo.html">YOLO tech</a> is the weigh station machine.&nbsp;
  </p>

  <p>
    People will send you a lot of nonsense. Someone might send you something useful. Or they might just drop some malware disguised as an interesting looking PDF file. Eiither way, you really don't want to download whatever lands in your Onionshare folder straight onto your nice reporting machine without first checking it out. All strange files are suspect. Those coming from strangers on the internet are even more suspect. So, let's create a an airlock to check these files out, open them up, read them and see what they're really made of. In this way, these files don't stay on your Onionshare Pi, and they don't reach your reporting machine. This is reportedly what happens when people use <a href="https://securedrop.org/" target="_blank">SecureDrop</a> properly: the files are moved to a <a href="https://docs.securedrop.org/en/stable/journalist.html#moving-documents-to-the-secure-viewing-station" target="_blank">mid-way laptop for opening and inspecting</a>. We're going to replicate this step on the cheap.
  </p>

  <p>
    For our own home brew limbo machine, we're going to use <a href="https://tails.boum.org/" target="_blank">Tails OS</a>. This is a secured, Linux operating system that's portable and can run on many types of computers from a USB stick. By default it's also an amnesiac, meaning, when you turn it off, anything that was done is lost, and next time you turn it on, it starts fresh. Whatever machine that's running it will also have no record of any activity. It can useful to carry a Tails USB around, because then a lot of different computers can be your computer, and when you're done, there's no trace you were on it. All its internet traffic is channeled through the Tor network as well, so your web visits stay private and you can stay more anonymous.
  </p>

  <p>
    But none of that is related to our use case this time. We just want to have an operating system that will take a bullet for us. The reason we're using it here is fairly straight-forward: It's cheap, secure, and if something goes wrong, it's easy to erase, reboot and start again, and the computer you're using it on will almost surely be fine as well. For more about Tails, <a href="https://tails.boum.org/doc/index.en.html" target="_blank">the documentation is here</a>.&nbsp;
  </p>

    <h3 id="ingredients-for-our-recipe">
      Ingredients for our recipe
    </h3>

  <ul>
    <li><strong>1 USB stick </strong>for running the Tails OS (minimum recommendation is 8gb, but for doing things with reasonably sized files, I say go large. I'm running mine on a 64gb stick)</li><li><strong>A desktop or laptop machin</strong><strong>e</strong> with a 64-bit x86-64 compatible processor. I'm running mine on an old, fairly damaged Lenovo Thinkpad E560 that work was getting ready to recycle. The point is, you don't need anything very special for this. Try looking around pawn shops or second-hand sores, you can find something for £150 or likely less that will fit the bill. It's possible someone you know has a machine in a closet they think is toast, but will work for this. We aren't using our reporting laptop because we want to separate our systems and it's likely you'll want to run both Tails and do your reporting at the same time.</li><li><strong>A second USB</strong> for storing your settings, passwords, moving files, etc.</li>
  </ul>

  <p>
    <b>Software used:</b> <a href="https://tails.boum.org/">Tails OS</a> (note, the site has broken SSL on many pages. Welcome to open source software. It does work well in the Tor Browser and nothing else), <a href="https://filezilla-project.org/" target="_blank">Filezilla</a>, <a href="https://keepassxc.org/" target="_blank">KeePassXC</a>, and <a href="https://veracrypt.fr/en/Home.html" target="_blank">Veracrypt</a>.
  </p>
<hr class="separator separator--dots" />

    <h3 id="the-recipe">
      The recipe
    </h3>

  <p>
    <b>Let's make USB stick with Tails OS on it.</b> Install Tails on your USB stick. <a href="https://tails.boum.org/doc/index.en.html" target="_blank">Go to this page</a>, scroll down to "Download, installation, and upgrade" and choose the machine you have for the download file and set up instructions. Follow those. It's pretty clear and I won't be going through them here. I did mine on a Mac. You may have something else.
  </p>

  <p>
    <strong>Try it out on your Tails USB.</strong>&nbsp;Drop it in your weigh station machine and see if everything is working. I'm assuming it's a PC of some sort, so <a href="https://tails.boum.org/doc/first_steps/start/pc/index.en.html" target="_blank">find yours here</a> to see how to make it load Tails. I went into the BIOS settings and altered the boot order so it always tries to load from the USB port first.
  </p>

  <p>
    <strong>Let's make our Tails OS persistent. </strong>Why? Because this is is a YOLO device, not a burner machine. We're going to get a few uses out of it, and likely just keep it running as it's our laptop for checking our Onionshare Pi. Persistence means that Tails will keep a little encrypted section that will maintain your settings and any other data or apps you install. Tails can walk you through setting up a persistent volume pretty easily, <a href="https://tails.boum.org/doc/first_steps/persistence/configure/index.en.html" target="_blank">but here's the the how-to if you need it</a>. Be sure to <a href="https://tails.boum.org/doc/first_steps/persistence/backup/index.en.html" target="_blank">back it up</a>!
  </p>

  <p>
    <strong>Let's add an FTP client.</strong> For whatever damned reason, Tails doesn't come with an FTP tool. Don't get me started. But we want one of these because it's easier to check the Onionshare Pi via SFTP than it will be to unmount and mount the Raspberry Pi's USB stick all the time, restarting Onionshare and so forth. So, we're going to add FileZilla to our persistent Tails volume. To do that:
  </p>

  <ul>
    <li><a href="https://tails.boum.org/doc/first_steps/welcome_screen/administration_password/index.en.html" target="_blank">Set up an administrator password</a> when starting Tails.</li><li>After Tails launches, go into the "Applications" menu in the nav bar and go to:<br>System Tools &gt;&nbsp;Synaptic Package Manager.</li><li>Use your admin password.</li><li>Search for Filezilla</li><li>Tick the box for the latest version, and in the pop-up, select "mark for installation."</li><li>Click the "apply" button, then click "apply" in the pop up window, because you mean it.&nbsp;</li><li>Let things download and then when asked, click "Install every time" or Tails won't remember to keep Filezilla if it shuts down and restarts. Then click "close" on the "changes applied" box, because for some reason that exists.</li>
  </ul>

  <p>
    <b>Configure the FTP client to reach your Onionshare Raspberry Pi.</b> So, now Filezilla exists on your Tails OS. Find it in "Applications" under "Internet" nestled between your Electrum Bitcoin wallet and Onions Circuits. Open that up. If you recall from our <a href="https://treacherous.tech/hosting-a-secure-contact-form.html">Onionshare post</a>, you had set up a way to SSH into your Onionshare device from your laptop to set it up. Those credentials will work in your SFTP client.&nbsp; You should have these saved in a KeePassXC password manager if you followed things to the letter. If not, hopefully you've got it in a SAFELY stored offline text file. Because now you need it.
  </p>

  <p>
    The Host is your Pi's IP address. Then the username is your ssh user, and the password is your ssh password. And the port will be <code>22</code>, unless you did extra credit work and futzed with that. Now navigate to your <code>/media/USB</code> directory in the Raspberry Pi (if you called it that). You should see anything that's been dropped there, including the happy little hello.txt file we made. Try downloading that into Tails and opening it to make sure things are working.
  </p>

    <h3 id="test-it-out">
      Test it out
    </h3>

  <p>
    Let's take our new set up for a test drive. You now have an Onionshare device to get files, and a Tails OS laptop to look at them. Send yourself a PDF. <a href="https://www.article19.org/wp-content/uploads/2021/07/Myanmar-Internet-Briefing-Paper-UPDATED.pdf" target="_blank">Here's one, now</a>.&nbsp; Save&nbsp;<code>Myanmar-Internet-Briefing-Paper-UPDATED.pdf</code> somewhere on your computer (not the Tails one, obvs). Open up the Tor Browser and visit your Onionshare form. Send the file along with a friendly text message. Now that you've done that, go to Filezilla in Tails and check your USB directory. You should see a new directory in there that you can download to your Tails machine and open. I saved it in Documents, which can be found under "places" in the nav bar.
  </p>

  <p>
    And that's it, we have two pieces of our YOLO tech setup, now. We haven't yet looked at the operational security of using these yet, and we have one more device to cover: The YOLO phone.
  </p>

    <h3 id="final-bits-and-pieces">
      Final bits and pieces
    </h3>

  <p>
    Some homework before starting the next post...
  </p>

  <ol>
    <li>Tails comes installed with KeePassXC. Create a database to store your FTP and SSH credentials for the Onionshare Pi. From now on, you will only access the Pi from the Tails machine. <a href="https://keepassxc.org/docs/KeePassXC_UserGuide.html" target="_blank">Learn the finer points of password management with KeePassXC here</a>.</li><li>Tails also has Veracrypt installed. This is a tool for created encrypted file storage volumes. When you decide you want to work with a file you've inspected on Tails, you're going to want to transport it (or a redacted, meta-scrubbed copy of it or a flattened export or a screenshot of it) on a USB stick to your work machine. You're work machine will never network to the Tails machine. Also, you want to secure the USB stick. <a href="https://www.veracrypt.fr/en/Home.html" target="_blank">Learn how to make an encrypted volume with Veracrypt on your USB stick here</a>. You'll also need to install Veracrypt on the device the USB is moving files to, but it has versions for Mac Windows and Linux.</li>
  </ol>

  <p>
    <b>Next post: </b>Working with files.
  </p>
<hr class="separator separator--dots" />

    <h3 id="notes">
      Notes
    </h3>

  <p>
    There are a few operating systems that run on USBs, and some that are highly secure themselves. I thought about just setting up <a href="https://www.qubes-os.org/" target="_blank">Qubes</a> and forgetting about both Tails and the Raspberry Pi. In Qubes you can create isolated environments for each. But that would require a fairly impressive machine, and these posts are focused on low-cost options. Qubes is great, but it's also not single-purpose. It's good. Great even. It's not YOLO.
  </p>

  <p>
    It's worth noting that Tails also has Onionshare pre-installed. The issue with this is that Tails software versions are often not up to date, and it's only the latest version of Onionshare that really suits our needs. Also, you don't want collection and analysis to happen on the same device. Finally, we want our secure contact webform to stay on all the time, while we might want to turn off our laptop and put it away. Your work computer is a lousy web server.
  </p>

  <p>
    Conceivably there are a few options you could use to connect to you Pi from Tails. You could wire it if you want, but the Pi already has it's ethernet port plugged into the router. You could create networks with USB ports or use USB ports to hand-move things, but SFTP is both secure enough, and keeps the wires and complications down.
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Some notes on setting up a YOLO work station</title>
        <author>
            <name>Yours Truly</name>
        </author>
        <link href="https://treacherous.tech/yolo.html"/>
        <id>https://treacherous.tech/yolo.html</id>
            <category term="yolo tech"/>

        <updated>2022-01-17T23:02:03+00:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://treacherous.tech/media/posts/10/privacy-sold-here.jpg" alt="Privacy Sold Here" />
                     This post is just a brief segue in our series on setting up a relatively secure journalism work station. We're calling these posts&nbsp;YOLO tech. YOLO = "You Only Live Once." Applied to technology, not humans, obvs. Consider the&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://treacherous.tech/media/posts/10/privacy-sold-here.jpg" alt="Privacy Sold Here" />
                
  <p>
    This post is just a brief segue in our series on setting up a relatively secure journalism work station. We're calling these posts&nbsp;<a href="https://treacherous.tech/yolo-tech/">YOLO tech</a>. YOLO = "You Only Live Once." Applied to technology, not humans, obvs. Consider the "burner phone. Popular amongst drug dealers or spies, the use case for them is that you turn them on once to make one phone call and then they're done. A YOLO device has a longer life span than that, but you go into using them knowing they're ultimately doomed, and that's okay. They can take the hits for the team. I didn't coin this. <a href="https://twitter.com/ElleArmageddon/status/1151547823680184320" target="_blank">Here's who did</a>. I'm just running with it.
  </p>

  <p>
    The purpose of a YOLO device is to be exposed to more risks, and connect to people and/or data you might not want on your permanent devices. At some point, they'll need to be replaced, and doing so won't be that painful. After a few uses, you may want to wipe them if not just destroy them to not worry about any recoverable data. If they get hacked, it's not as damaging as it would be if it happened to your more permanent machines. A YOLO tool only last as long as it's needed. If it becomes compromised, it doesn't take down everything else. Cut it loose and drop a new one in to replace it. Got it? Good.
  </p>

    <h3 id="some-traits-of-a-good-yolo-workstationnbspbr">
      Some traits of a good YOLO Workstation...&nbsp;<br>
    </h3>

  <p>
    <strong>Keep things cheap(ish).</strong> Yes, it's a relative concept, but the point is to not invest more than you can reasonably stand to lose. This way, it won't sting your walled (too much) if it gets trashed. All tech, the longer it's exposed to the public as a way for said public to reach you, should get less trustworthy the longer you use it. A mobile could be recycled through a few phone numbers, but eventually, he more files you access and open on it, the likelihood one of them was off increases. Same with servers or other hardware you use for file sharing, or sending or receiving text or having voice or video calls. You may want to wipe or sub them out after a single project, depending on what's involved. That habit could get expensive pretty fast.
  </p>

  <p>
    <strong>Keep things simple.</strong> Ideally, each device should have a single purpose (or as few as possible). The best tools do one thing well, and if you lose it, you haven't lost your entire toolset. This is one of the counter-intuitive elements of the YOLO workstation. We generally have been trained to expect our devices to be multi-functional Swiss Army Knives. Smartphones are essentially multi-tools with the ability to have a phone call being just one piece of functionality. Now we want doorbells to not just ring when someone pushes a button, but to capture video of the person outside, help us with the shopping, act as an anti-burglary device, and so on. A YOLO device has one use case. It's there to talk with sources. Or it's there to receive a file. Another one may be there to review those files. Something else exists just to store them. None are tied to one another. If one climber falls, there's no rope to drag the others down.
  </p>

  <p>
    <b>Keep things minimal.</b> This is different than the above rule. It may sound like I'm asking you to fill a desk full of gadgets. The opposite is the case. Marie Kondo your secure workspace. The more things you have, the more you need to monitor and maintain. Trust me, none of it sparks joy. Each device needs to work for its existence. What's it doing for you? If it doesn't fill a function you need right now, don't set it up.
  </p>

  <p>
    <strong>Keep things usable (as much as that exists).</strong> There are great secure apps out there. On most, the usability is so-so to bad. PGP email encryption, for example: Hard to do well and right. You may want to have it available in case a source wants to use it, but you might not want to offer it as a regular point of contact. Steer your contacts towards the communication options you know how to manage. Go for secure apps with some usability and minimal to no personally identifiable information: <a href="https://signal.org/" target="_blank">Signal</a>,&nbsp;<a href="https://wire.com/en/" target="_blank">Wire</a>, <a href="https://keybase.io/" target="_blank">Keybase</a>&nbsp;<a href="https://briarproject.org/" target="_blank">Briar</a>, <a href="https://matrix.org/" target="_blank">Matrix</a>, <a href="https://getsession.org/" target="_blank">Session</a>.&nbsp;
  </p>

  <p>
    <strong>Keep things understandable.</strong> Know how your tech works, at least conceptually. We're already running some things through Tor in this series. Understand why that is. What's it doing for you? Why do you want it? Lots of apps deliver communications in different ways. Signal needs a phone number. Wire doesn't. Matrix is federated. Briar is peer-to-peer. Aside from the crypto library, Wickr isn't open source, and now owned by Amazon. Telegram is popular, but also not open source, and sometime not encrypted. Which apps do you want to include, and why are you choosing them. Know their use cases, purposes and limits. You're a journalist; research stuff.
  </p>

  <p>
    <strong>Keep things local(ish).</strong> Local means it's on your YOLO device instead of "the cloud" (other people's computers). I wouldn't say to never use online storage for anything, because we're beyond that reality, and sometimes it's really useful. But have a strong bias for local, offline storage. As soon as something's not needed online, remove it.
  </p>

  <p>
    <strong>Keep (most) things empty.</strong> Don't let data build up on any of your YOLO devices that connect to the internet (or any network). Backup and delete. Any online accounts connected to them should be empty as often as possible. Store anything you want to keep offline. As soon as anything isn't needed, delete it.
  </p>

  <p>
    <b>Keep (some) things backed up.</b>&nbsp;Replacing devices can be a joyless, time consuming task. Use a password manager. I recommend <a href="https://keepassxc.org/" target="_blank">KeePassXC</a>. Keep anything related to settings for your YOLO tech on an encrypted hard drive. Same with your important files. Back them up on a secured, offline storage. YOLO communications tech isn't for storage. Messages and data is transient. Remember, we don't entirely trust them.
  </p>

  <p>
    <strong>Encrypt all the things (that can be).</strong>&nbsp;That is kind of the rule, by itself. If there's an option to encrypt a hard drive, use it. Encrypt the mobile during set up. Encrypt USB sticks used to hold or transfer any files. All the comms software should be end-to-end encrypted. Devices connecting to the internet run through Tor or at least a VPN. For file encryption, have <a href="https://veracrypt.fr/" target="_blank">Veracrypt</a>&nbsp;or <a href="https://cryptomator.org/" target="_blank">Cryptomator</a> which then helps keep things secure when you need the cloud.
  </p>

  <p>
    
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Onions and raspberries and file sharing</title>
        <author>
            <name>Yours Truly</name>
        </author>
        <link href="https://treacherous.tech/hosting-a-secure-contact-form.html"/>
        <id>https://treacherous.tech/hosting-a-secure-contact-form.html</id>
            <category term="yolo tech"/>

        <updated>2022-01-17T23:02:03+00:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://treacherous.tech/media/posts/9/cover.png" alt="raspberry Pi 4b" />
                     A secure file drop for journalists to to get the goods from their sources This site's&nbsp;contact page&nbsp;now includes a link to a secured way for sources to send me files or text messages privately, securely, and anonymously (if&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://treacherous.tech/media/posts/9/cover.png" alt="raspberry Pi 4b" />
                
    <h3 id="a-secure-file-drop-for-journalists-to-to-get-the-goods-from-their-sources">
      A secure file drop for journalists to to get the goods from their sources
    </h3>

  <p>
    This site's&nbsp;<a href="https://treacherous.tech/contact.html">contact page</a>&nbsp;now includes a link to a secured way for sources to send me files or text messages privately, securely, and anonymously (if they choose). It's built on software called <a href="https://onionshare.org" target="_blank">Onionshare</a>, and hosted on a <a href="https://www.raspberrypi.org/" target="_blank">Raspberry Pi</a>. Once you've sent the message or files, there's no trace of you having done so on the internet. And the files are locally stored on a device I have, not kept or copied&nbsp;somewhere on <em>the cloud</em>. A contact can only access this web form by using the <a href="https://www.torproject.org/" target="_blank">Tor Browser</a>, a privacy-first web browser that helps keep its user's site visits from being tracked or blocked. But with it, you can securely send me something <a href="http://entyms3fdn4fyl6lizog6hoztvaqkvv2njmcovslkm55xhahs7nnmiqd.onion" target="_blank">here</a>:<br><code>http://entyms3fdn4fyl6lizog6hoztvaqkvv2njmcovslkm55xhahs7nnmiqd.onion</code>
  </p>

  <p>
    In this post, I'm going to share with you the links and walk-through tutorials to make your own, and a few notes on what I did to set up my own kit along the way. This post is part of a little series on a proof-of-concept, secure workstation for freelance or independent investigative journalists. In the last post, we looked at how to create an <a href="https://treacherous.tech/mirroring-a-site-on-a-onion-address.html" target="_blank">unblockable and hidden</a>&nbsp;version of your own website&nbsp;using <a href="https://github.com/alecmuffett/eotk" target="_blank">EOTK</a>, and why you might want to do that for potential sources wanting to reach you.&nbsp; Now here's more secure and confidential a way for people to send you things.
  </p>

    <h3 id="some-background-on-all-of-this">
      Some background on all of this...
    </h3>

  <p>
    If you just want to get to the tech, skip this and scroll down to <strong>"The Goods"</strong> below.
  </p>

  <p>
    So, I really don't like running web forms. They're clunky to set up, introduce security holes in websites, still need to send data some place you have to regularly check, and there's a good chance that you're just turning on a hose of toxic sludge and pointing at yourself. But what's even worse than those are email accounts. Sharing an email address on a website is basically like ringing the dinner bell for spammers and scams. And I'm not even going to get into the logistics of sharing a contact number. At least you can filter spam and skim junk mail. I've tended to direct any of the unwashed public who may want to ping me for some reason towards reasonably secure end-to-end encrypted apps that look like they're not requiring much user data to run.
  </p>

  <p>
    As a journalist, you need reliable, secure, and checkable avenues for sources to reach you. Maybe they're sources you know and just need direction, but you need some access points for cold-callers. Attracting a journalistic source is a bit like phishing, though with less sociopathy. A bit less.
  </p>

  <p>
    Freelancers&nbsp;— particularly those investigating organised crime, state violence,&nbsp; and corporate or government malfeasance&nbsp;— don't often have it as easy as staff journalists at some of the large news outlets, even if these are the same media organisations to whom freelancers are pitching their work. And yet often it's these journalists with the deeper background and expertise to better leverage high-value information on a given topic.
  </p>

  <p>
    The New York Times or the Guardian have the resources to run their own <a href="https://securedrop.org/" target="_blank">SecureDrop</a>. Anti-corruption and whistle blower groups could invest in setting up a <a href="https://www.globaleaks.org/usecases/anti-corruption/" target="_blank">GlobaLeaks</a>. But as an independent operator, it's likely you don't have your own full time system administrator to set up, monitor and manage these kinds of things, and you probably didn't get into journalism to be one of those yourself. This is where something small, relatively simple and portable comes in, so today we're going to look at <a href="https://onionshare.org/" target="_blank">Onionshare</a>, and how to set it up.
  </p>

    <h3 id="the-goods">
      The Goods
    </h3>

  <p>
    Okay, let's make stuff. Nothing is new or unique in today's recipe. All the ingredients are easily found, and the directions are also already online. We're not inventing anything new.&nbsp; You don't need to become a full-blown sysadmin. You will need to become a mini sysadmin.
  </p>

  <p>
    <b>The recipe:</b><b><br></b><a href="https://onionshare.org/" target="_blank">Onionshare</a> is our main ingredient. It's developed and maintained by <a href="https://twitter.com/micahflee" target="_blank">Micah Lee</a>, the Director of Information Security at <a href="https://theintercept.com/" target="_blank">The Intercept</a>. You could run Onionshare on your own computer if you want. It works on Windows, Mac and Linux machines. But I'm assuming your writing device might be kind of precious to you. You may not want to leave it open to every random file you receive from a stranger over the internet. We want to compartmentalise our file-obtaining on its own small, isolated and much less expensive device.
  </p>

  <p>
    So for these goals, we're following Micah's guide,&nbsp;"<a href="https://micahflee.com/2021/02/onionshare-anonymous-dropbox-raspberry-pi/" target="_blank">Running an OnionShare anonymous dropbox on a Raspberry Pi</a>." I've deviated from it in a couple of small ways (which I'll describe below), but it's a good step-by-step tour. Just follow it.
  </p>

  <p>
    <b>The ingredients:</b><br>You don't need the latest one, but to host my Onionshare I got the <a href="https://thepihut.com/collections/raspberry-pi/products/raspberry-pi-4-model-b?variant=31994565689406" target="_blank">Raspberry Pi 4 B, with 8gb ram</a>. Also, I wanted more storage space, so for this I got a 1TB USB stick. I recommend going with a fairly good sized SD card to run the software.&nbsp;I used a Sandisk card with 64gb. There are also little things you will need to make sure you have: all the cables, an SD card reader, an internet-connected router (if that isn't obvious).
  </p>

  <p>
    <strong>Optional:<br></strong>The walk-through shows you how to do everything from your computer, without typing directly into the Raspberry Pi, but I wanted to set my own password and username and see that things were working before connecting it to the internet router. So if you want to do that, you'll need a monitor, keyboard, mouse and the right cables for your Pi device.
  </p>

  <p>
    <b>Changing the username as well as the password:<br></b>After you set up the SD card with the Ubuntu software, you may not want your username to be "ubuntu."&nbsp;<a href="https://wiki.ubuntu.com/ARM/RaspberryPi#First_boot_.28Username.2FPassword.29" target="_blank">To change this</a> you need to go into your now-formatted SD card, and edit the user-data file on the system-boot partition. <br>
  </p>

  <p>
    <strong>Adding more storage space:<br></strong>There's a good chance someone could send you more things than your Raspberry Pi's internal space can hold. And while you can SFTP from a remote computer to get files, you may want to actually physically transport them. So I wanted to make Onionshare store files to a USB stick.&nbsp;
  </p>

  <p>
    Using the Pi device directly, <a href="https://vitux.com/how-to-manually-mount-unmount-a-usb-device-on-ubuntu/" target="_blank">I used these steps</a> to mount my USB stick and map it to a directory that Onionshare will be able to find to save any files it gets. By default, my USB stick was already formatted as exfat, not vfat, and I didn't want to reformat it. If that's your problem too, <a href="https://itsfoss.com/mount-exfat/" target="_blank">here's how to solve it</a>.
  </p>

  <p>
    I also added a small file called "hello.txt" to my USB stick. This is useful because when you map it to its directory on the Pi, you can go there and quickly see if you've done things right or not. If you have, you'll find the little hello.txt waiting for you.
  </p>

  <p>
    <strong>Using Onionshare optional instructions:<br></strong>Because I added a different location to receive files, I couldn't just use the default command to start the software. Also, I wanted to give mine it's own name to personalise it. Before you launch your Onionshare for use, look at all the options with&nbsp;<code>onionshare-cli -h</code>.&nbsp;<br>
  </p>

  <p>
    So my command ended up looking similar to this:
  </p>
<pre class="line-numbers  language-html"><code>onionshare-cli --receive --persistent ~/anon-dropbox.session --public --title treacherous.tech --data-dir ../../path_to/media_folder</code></pre>

  <p>
    You can now test your Onionshare by visiting it on the Tor Browser. Send it a file, check you see it when you connect to it via SFTP or SSH, etc.
  </p>

  <p>
    So,&nbsp; now that you have a way of getting files, what you will need are some methods and tools for securely checking and handling them. The next post I'll add on this blog will cover that.
  </p>
<hr class="separator separator--dots" />

    <h3 id="notes">
      Notes:
    </h3>

  <p>
    <strong>Further optimising:<br></strong>I'd like to see how better customise my Onionshare to better show my ownership of it on the page, incorporate some of the other Onionshare tools such as a static website maker and chat board to create a little mini-site that all links together and back to my public site.
  </p>

  <p>
    <strong>Shopping list:<br></strong>Getting started with a Raspberry Pi isn't quite as simple as it's marketed to be. Some of us have drawers of cables and adaptors and old monitors laying around. Here are all the elements that actually went into this:
  </p>

  <ul>
    <li>Laptop (I used a Macbook)</li><li>Raspberry Pi 4 B, with  8gb ram<br></li><li>USB-C power supply<br></li><li>Sandisk SD card with 64gb<br></li><li>USB&nbsp;SD card card reader to format the SD card on the laptop</li><li>Ethernet cable</li><li>Internet router</li><li>Peripherals for the Raspberry Pi (because I did some things like install python, check for updates, customise the username and password, etc. on the Pi)</li><ul><li>Monitor (with HDMI connectivity);</li><li>Micro HDMI cable (if monitor doesn't have one)</li><li>HDMI adaptors (if your monitor predates HDMI, like mine)<br></li><li>USB connecting keyboard</li><li>USB connecting mouse</li></ul><li><span style="color: var(--eb-text-primary-color); font-family: var(--font-base); font-size: 1em; font-weight: var(--font-weight-normal);">Optional but recommended: Raspberry pi case (I used the "Official Raspberry Pi 4 Case")</span><br></li><li><span style="color: var(--eb-text-primary-color); font-family: var(--font-base); font-size: 1em; font-weight: var(--font-weight-normal);">Password manager (<a href="https://keepassxc.org/" target="_blank">KeePassXC</a> works well for these things, open source, secure, local)</span></li><li><span style="color: var(--eb-text-primary-color); font-family: var(--font-base); font-size: 1em; font-weight: var(--font-weight-normal);"><a href="https://www.raspberrypi.org/software/" target="_blank">Raspberry Pi imager software</a> (Windows, Mac, Linux optiions)</span></li><li><span style="color: var(--eb-text-primary-color); font-family: var(--font-base); font-size: 1em; font-weight: var(--font-weight-normal);">The <a href="https://www.torproject.org/" target="_blank">Tor Browser</a> (for testing)</span></li>
  </ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Mirroring a site on a .onion address</title>
        <author>
            <name>Yours Truly</name>
        </author>
        <link href="https://treacherous.tech/mirroring-a-site-on-a-onion-address.html"/>
        <id>https://treacherous.tech/mirroring-a-site-on-a-onion-address.html</id>
            <category term="yolo tech"/>

        <updated>2022-01-17T23:02:03+00:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://treacherous.tech/media/posts/8/Onion_garden-2.jpg" alt="https://commons.wikimedia.org/wiki/File:Onion_garden.jpg" />
                     I've made a .onion Tor hidden service mirror of this here blog. Using The Tor Browser, you can now find it at&nbsp;ygwdnjw2gt6sabcrhjqmpgsn4hhddomhipdpxbx6bru2zr2damxevqyd.onion. This post is just a run through of the route I took to do it and&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://treacherous.tech/media/posts/8/Onion_garden-2.jpg" alt="https://commons.wikimedia.org/wiki/File:Onion_garden.jpg" />
                
  <p>
    I've made a .onion Tor hidden service mirror of this here blog. Using The Tor Browser, you can now find it at&nbsp;<code>ygwdnjw2gt6sabcrhjqmpgsn4hhddomhipdpxbx6bru2zr2damxevqyd.onion</code>. This post is just a run through of the route I took to do it and some notes on the steps someone could take to do likewise, and a few pain points on the way. Lastly, I've chucked in some final points on what the world needs if Hidden Service platforms are to become more common.
  </p>

    <h3 id="the-what-and-the-way">
      The what and the way
    </h3>

  <p>
    If the following is old hat, then skip this section and just scroll down to <strong>The Goods</strong> that follow. I still assume a lot of people aren't familiar with The Tor Network.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://treacherous.tech/media/posts/8/onion-bounces-2.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://treacherous.tech/media/posts/8/responsive/onion-bounces-2-xs.jpg 300w ,https://treacherous.tech/media/posts/8/responsive/onion-bounces-2-sm.jpg 480w ,https://treacherous.tech/media/posts/8/responsive/onion-bounces-2-md.jpg 768w ,https://treacherous.tech/media/posts/8/responsive/onion-bounces-2-lg.jpg 1024w ,https://treacherous.tech/media/posts/8/responsive/onion-bounces-2-xl.jpg 1360w ,https://treacherous.tech/media/posts/8/responsive/onion-bounces-2-2xl.jpg 1600w"  height="549" width="976" alt="" />
      
    </figure>

  <p>
    Sometimes you don't want your internet service provider (ISP) to know what you're up to on the web. This could be just a personal choice, it could be due to local laws, the internet router could be suspect if you're on a shared or unfamiliar network, or maybe you're in a country where looking up some topics are taboo if not just illegal. You may have heard of the <a href="https://www.torproject.org/download/" target="_blank">Tor Browser</a>, which is a web browser aimed at delivering users with strong privacy and anonymity and evade censorship. It bounces traffic through encrypted relays and delivers the site back through them as well. That's the pithy short version of what's going on. Find out more about it at the <a href="https://www.torproject.org/" target="_blank">Tor Project website</a>.&nbsp;
  </p>

  <p>
    Tor itself is a <a href="https://svn-archive.torproject.org/svn/projects/design-paper/blocking.html" target="_blank">network</a>.&nbsp;People can also make websites inside the Tor network, or create an alternate address in it, letting people find their site on a ".onion" address inside Tor instead of exiting out the other side. This helps to maintain the end-to-end encryption between you and the website you're visiting. It also can add another layer of anonymity for visitors.
  </p>

  <p>
    You've likely heard of the 'Dark Web' horror stories of hit men for hire and drug markets, but also sites like the&nbsp;<a href="https://www.bbc.co.uk/news/technology-50150981" target="_blank">BBC</a> offer .onion addresses to help users protect themselves while visiting potentially forbidden content according to whatever filtering may be happening locally. To visit a .onion address, you need the Tor Browser, but with it you can circumvent censorship and monitoring by visiting it at&nbsp; <a href="https://www.bbcnewsv2vjtpsuy.onion/" rel="nofollow noopener">bbcnewsv2vjtpsuy.onion</a>.&nbsp; I won't list all the examples here, but if you want to see more examples, <a href="https://privacypros.io/tor/best-onion-sites/" target="_blank">check them out elsewhere</a>. There are loads.
  </p>

  <p>
    The internet is becoming a more surveilled experience from the moment anyone gets on it. the onramps, the services and search engines and more and more of the tools we use to communicate are finding that the key way of staying in business is to categorise us and find ways to better flog things we can buy, or sell on that data to others who may have some use for it. Few software makers are traveling in the opposite direction. The Tor Project is one of these that seek to make an open source protocol out of your right to privacy. I'm interested in ways publishing platforms can bypass censorship, but also respect their visitor's rights/needs to privacy or more anonymity. Potentially, I want to use this, or a flavour of it, in a project for a large number of sites.
  </p>

  <p>
    There are a few other services I'm interested in as well. the <a href="https://geti2p.net/en/" target="_blank">i2P network</a> runs another censorship circumvention service where content or service creators can run what they call <a href="https://geti2p.net/en/docs/api/i2ptunnel" target="_blank">eepsites</a>.&nbsp; I'm interested in how to mirror on these as well.&nbsp; In the true spirit of mad scientists, I experiment on myself.
  </p>

    <h3 id="the-goods">
      The Goods
    </h3>

  <p>
    Now on to the technical bits. This isn't meant to be the all-singing-all-dancing tutorial on mirroring everything on Tor, but more of a "here's what I did" run-through. I may have done some things wrong. There may be better ways to do it. But if it helps you out and increases people using Tor Hidden Services to help users, then that's fabulous.
  </p>

  <p>
    So, the public site I mirrored is the site you're looking at right now. It's a simple, flat-file blog hosted on <a href="https://pages.github.com/" target="_blank">Github Pages</a>. I don't know how well some custom functionality or any especially whiz-bang things you may have on your website will work out-of-the-box when subjected to the Tor Browser or this method of mirroring a site as a hidden service. The good news, is you'll get to find out really soon.
  </p>

    <h4 id="the-ingredients">
      The ingredients
    </h4>

  <p>
    Firstly, we're going to need a website to mirror. Note, this is only for mirroring a website that's already available on the open, public web, not hosting something inside a .onion address exclusively. We aren't trying to hide the website or much anything about it. It's about making it accessible&nbsp; from inside the Tor network.
  </p>

  <p>
    For this I used a really nice tool by Alec Muffett, called&nbsp;<a href="https://github.com/alecmuffett/eotk" target="_blank">EOTK</a>,&nbsp;to do the .onion mirroring. To host the mirror I got a cheap VPS (there are suitable candidates for this on Linode, Digital Ocean, Vultr, etc.) For the SSL certificate I used <a href="https://www.harica.gr/" target="_blank">harica.gr</a>, which is one of only two certificate providers that cover hidden services (I have strong opinions on this, and so more editorialising when we get to that section below).
  </p>

  <p>
    Like any good cooking show, I've got the finished&nbsp;soufflé <a href="https://ygwdnjw2gt6sabcrhjqmpgsn4hhddomhipdpxbx6bru2zr2damxevqyd.onion" target="_blank">here</a>. We need the <a href="https://www.torproject.org/download/" target="_blank">Tor Browser</a> to look at that, but you're going to need that anyway to see how our dish is shaping up at different stages along the way. Also, the preparation is all taking place in the terminal. Everything here assumes you're able to use that as well as do the set-up of a server and user with its own ssh key.
  </p>

  <p>
    <em>I'm going to fast-forward a bit.&nbsp; Just know I made a number of errors along the way and what follows represents just the correct turns, and not the bad ones or dead ends. I<strong> highly recommend reading through the bulk of the EOTK repo and all doc files</strong>, including but not limited to the <a href="https://github.com/alecmuffett/eotk/blob/master/docs.d/HOW-TO-INSTALL.md" target="_blank">how-to-install</a> page. The <a href="https://github.com/alecmuffett/eotk/blob/master/docs.d/deprecated-documents.d/CHANGELOG.md" target="_blank">Changelog</a> is also really useful and can save a lot of time by reading before starting. There is also a lot of good information to be found in&nbsp; &nbsp;This post isn't meant to be a replacement for any of that, but just a summary of my efforts.</em>
  </p>

    <h4 id="the-server">
      The server
    </h4>

  <p>
    Our .onion mirrored website needs a server.&nbsp;I fired up a&nbsp;<strong>Ubuntu 20.04 VPS</strong>. This is a standard option you can find on most any VPS provider. EOTK has instructions for various flavours of server but the steps that follow here are assuming that one.
  </p>

    <h4 id="creating-a-onion-mirror-of-our-website">
      Creating a .onion mirror of our website
    </h4>

  <p>
    SSH into this new server. It's good to do an&nbsp;<code>apt-get update</code> and&nbsp;<code>apt-get upgrade</code>&nbsp;to start things off with the latest versions of things.
  </p>

  <p>
    Now let's get the EOTK package from Alec's repo:<br><code>git clone https://github.com/alecmuffett/eotk.git</code>
  </p>

  <p>
    Next head to the EOTK directory which is where most everything is going to happen.<br><code>cd eotk</code><br>
  </p>

  <p>
    Here, were' going to build the environment based on the use of our Ubuntu 20.04 setup:<br><code>./opt.d/build-ubuntu-20.04.sh</code>
  </p>

  <p>
    Now we're going to generate the scripts (really do look at before moving on):<br><code>./eotk make-scripts</code>
  </p>

  <p>
    Now it's time to give EOTK the instructions it needs to mirror our website. I use nano to edit things. Use vim or whatever you want, but nano is easy:<br><code>nano your_project.tconf<br></code>
  </p>

  <p>
    In this new empty file, customise and add the following:
  </p>

  <p>
    <code>set project your_project<br>hardmap %NEW_V3_ONION% your_website.com</code>
  </p>

  <p>
    <em>(Note where it specifies 'V3'. We need a v3 onion address as these are what the SSL certificates will require. Earlier versions are shorter, possibly easier, but won't work with SSL)</em>
  </p>

  <p>
    Save and exit that file.
  </p>

  <p>
    Run the following:<br><code>./eotk config your_project.tconf</code><br>
  </p>

  <p>
    This is going to generate the .onion address. Copy that and save it in a txt file somewhere for pasting into the Tor Browser, and for the SSL stage later.
  </p>

  <p>
    We no longer need the tconf file, so remove that. Notice there's now a .conf file with the same name. The rest of the effort will go in there:<br><code>rm your_project.tconf</code>
  </p>

  <p>
    Now let's start the new .onion website:<br><code>./eotk start your_project</code><br>
  </p>

  <p>
    Go to the Tor browser and visit this brand new .onion address. Here's what will see if everything happened right:
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://treacherous.tech/media/posts/8/security-risk.png" sizes="(max-width: 48em) 100vw, 768px" srcset="https://treacherous.tech/media/posts/8/responsive/security-risk-xs.png 300w ,https://treacherous.tech/media/posts/8/responsive/security-risk-sm.png 480w ,https://treacherous.tech/media/posts/8/responsive/security-risk-md.png 768w ,https://treacherous.tech/media/posts/8/responsive/security-risk-lg.png 1024w ,https://treacherous.tech/media/posts/8/responsive/security-risk-xl.png 1360w ,https://treacherous.tech/media/posts/8/responsive/security-risk-2xl.png 1600w"  height="196" width="1256" alt="" />
      
    </figure>

  <p>
    This is fine. The Tor Browser, built on Mozilla's Firefox, is checking for Valid SSL certificates for the site to make a secure https connection. EOTK's nginx configuration defaults to https, and generates some default certificates that obviously won't match our site's brand new address. Since we know we made this website just now, we'll click the advanced button to "accept the risk and continue" and check out whether the website mirror is otherwise behaving normally. Remember to remove the exception from the browser when we're finished.
  </p>

    <h4 id="now-lets-make-https-work">
      Now let's make https work
    </h4>

  <p>
    The tasks above worked for me quite fast (about 10 minutes). Sorting out SSL on .onions presented a slight learning curve, some Googling, and a few questions back and forth with Alec in the EOTK repo issue queue, and the Harica helpdesk, both of which were patient and helpful. It's worth pointing out that in that time, Alec has written up a blog post on this very topic, read that for the official version, and for how to better use the EOTK conf file, which I can already see lends itself to my more ultimate goal on how to wrap everything into a scriptable and quickly repeatable process.
  </p>
<hr class="separator separator--dots" />

  <p>
    <strong>Read:</strong>&nbsp;<a href="https://alecmuffett.com/article/14735" target="_blank">Make your cleartext website #UNBLOCKABLE by adding a @torproject Onion address, using #EOTK and a HTTPS certificate from #HARICA</a>
  </p>
<hr class="separator separator--dots" />

    <h4 id="some-ssl-ranting">
      Some SSL ranting
    </h4>

  <p>
    I'm now several years into being used to using <a href="https://letsencrypt.org/" target="_blank">Let's Encrypt</a> SSL for sites and haven't needed to go buy a certificate and deal with that whole manual validation process for a long time, and am sort of antagonistic about the whole thing. There are use cases for&nbsp;extended domain validation, getting that extra-verified&nbsp;<em>green bar</em> padlock or external validation "circle-of-trust" in the browser navigation bar, etc. I'm happy my bank has it. Facebook, Google, Amazon users should expect it. But I don't think it's necessary for the vast majority of the web. It's like buying air. Aside from making SSL free, to me the true gift of Let's Encrypt is the simplicity and the automation. But it doesn't run on Tor hidden service sites (yet).
  </p>

  <p>
    Up until pretty recently, it seems the only SSL option for a .onion was <a href="https://www.digicert.com/dc/blog/ordering-a-onion-certificate-from-digicert/" target="_blank">Digicert</a>, with a price tag of $344 (not including tax) for a year of https. Possibly not what most people have budgeted for their blog, or underfunded news site or small, scrappy nonprofit organisation. Enter <a href="https://www.harica.gr/en/About/About" target="_blank">Harica.gr</a>, which drastically reduced the cost of entry to € 5.58. Harica is also <a href="https://www.gunet.gr/en/" target="_blank">funded by a nonprofit itself</a>, so with that small cost I feel like I'm actually paying for a service and funding someone to answer my potentially tedious questions.
  </p>

    <h4 id="okay-back-to-it">
      Okay, back to it
    </h4>

  <p>
    In the EOTK directly, let's take some time to review the different commands (if not already done).<br><code>./eotk -help</code>
  </p>

  <p>
    It's likely this is something useful to do at the start, but at this stage, we need to add some more things to our .conf file, restart EOTK once or twice and restart nginx at least once.
  </p>

  <p>
    In Harica.gr, let's request a new certificate. Follow the steps there. We will need to validate the website. For this, I chose to generate my own csr instead of have Harica do it, and it's worth remembering this for later when we need to work on our .key file.&nbsp; Do the following to make a .csr file:<br><code>openssl req -newkey rsa:2048 -keyout your_site.key -out your_site.csr</code>
  </p>

  <p>
    <mark><strong>IMPORTANT(!):</strong></mark> Save the password in your local txt file, we'll need it.
  </p>

  <p>
    Submit the csr. Now Harica wants us to host a file on the site to complete the varification. Download that so we can copy the name and the content. Copy its name and content into the your_site.conf file.<br><code>nano your_site.conf</code>
  </p>

  <p>
    Paste in something that will look like this. I'm doing this for just one website, so this is pretty small. There are great examples of how to mirror loads of .onions at once in the EOTK docs, so for those, this entry would be much longer.
  </p>
<pre class="line-numbers  language-html"><code>set ssl_proof_csv \
    /test,hello-world \
    /www/.well_known/pki-validation/FILENAME,CONTENT 
</code></pre>

  <p>
    I did reach out for help at this stage as various attempts weren't working out. <a href="https://github.com/alecmuffett/eotk/issues/89" target="_blank">You can see that here</a>. This <a href="https://github.com/alecmuffett/eotk/issues/91" target="_blank">other issue</a>&nbsp;on overhauling the SSL proof mechanism is also worth tracking, as I am wanting to make a lot of .onion sites at some point. The<code> /test,hello-world \</code> argument is simply for us to test that our conf file is making urls right.
  </p>

  <p>
    Save that .conf file and then run these:<br><code>./eotk config your_site.conf<br></code><code>./eotk restart your_site</code>
  </p>

  <p>
    Go back to the Harica dashboard to see to the next part of the validation.&nbsp;
  </p>

    <h3 id="get-and-install-the-certificates">
      Get and install the certificates
    </h3>

  <p>
    If the .onion site's validation checked out, then huzzah! We can now access the new files in the Harica dashboard. The certificates there will come in different formats. There's pem, der,&nbsp;PkCS#7 and a Pem Bundle. <strong>Download the Pem Bundle.</strong> We don't need the rest.
  </p>

  <p>
    For the next bit, we need to make our encrypted key into a private key. Go back to where we'd made your .csr. and .key file. Do the following:<br><code>openssl pkcs8 -in your_site.key -out your_site-plain.key</code>
  </p>

  <p>
    Now, we're off to the SSL directory to add our files.&nbsp;<code>cd eotk/projects.d/your_site.d/ssl.d/ </code>and add the <strong>your_site-plain.key</strong> and the <strong>.pem bundle</strong> you downloaded from Harica. Remove the default keys that were there, we don't need them, now.
  </p>

  <p>
    Next, we're going to edit our nginx file to reflect the new files there. <code>cd ../ </code>to the <b>your_site.d</b> directory and open the <strong>nginx.conf</strong> file. In the<b>&nbsp;# SSL config</b> section, update the names of the pem and key files to your new ones, and be careful to keep the path the same. Save and close that.
  </p>

  <p>
    Back in our EOTK directory, restart nginx:<br><code>./eotk nxreload treacherous</code>
  </p>

  <p>
    Now go back to the .onion site in the Tor Browser and it should be working splendid.
  </p>

    <h3 id="final-notes">
      Final notes
    </h3>

  <p>
    So, I'm pretty sure I took the long way around and there are a lot of good shortcuts, and demonstratively better uses of the .conf file to combine steps. I forgot to include a .www in this certificate. The latest changes in EOTK this week also include a lot of good SSL advice.
  </p>

  <p>
    <strong>Laundry list:</strong>
  </p>

  <ul>
    <li>I forgot to add a www version of the .onion address in the Harica SSl cert. You can make as many addresses as you want in the Harica dashboard fro your certificates. Could be useful for wildcards or running long lists of hidden service mirrors.</li><li>I understand (and agree with) the argument for driving people toward https on Tor hidden service sites, but think I'd it should be easier not to do this as an option until there's a Let's Encrypt option or something like it. I need to play more with EOTK to figure this out.&nbsp;</li><li>I think this entire process is scriptable, possibly in python. I'd like to run a cli that made this even more automated, and possibly removed some of the human gaffes from the process. Again, it would require a Let's Encrypt SSL solution to really work in one go.</li><li>Cloudflare could wrap this entire service into a back-end and render it as a switch in the user dashboard. This would then allow it to more easily white-list Tor traffic instead of treating it as suspect.</li>
  </ul>

  <p>
    For my <i>actual</i> project, I'd like to see how I can batch as much of this into a single script as possible as I'd potentially like to create .onions for 100+ mirrors in a manageable way with some other requirements not worth going into here. While I recommend and appreciate Harica, for my project to scale sustainably, I'd need Let's Encrypt or some kind of variant of it to support .onions.
  </p>

  <p>
    Anyway, hope it helped. Many thanks to Harica's helpdesk person and Alec Muffett for their kind assists. Anything in this post that may be incorrect or problematic is mine.
  </p>

  <p>
    
  </p>

  <p>
    Happy onions.
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Review: &#x27;This is How They Tell Me The World Ends&#x27;</title>
        <author>
            <name>Yours Truly</name>
        </author>
        <link href="https://treacherous.tech/this-is-how-they-tell-me-the-world-ends.html"/>
        <id>https://treacherous.tech/this-is-how-they-tell-me-the-world-ends.html</id>
            <category term="books"/>

        <updated>2022-01-17T23:02:03+00:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://treacherous.tech/media/posts/7/this-is-how.jpg" alt="Coffee and book" />
                     The true stories rarely have happy endings. I finished my journey through "This is How They Tell Me the World Ends", a readable tour through the shady and yet still shadier parts of cyber weapons market by New&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://treacherous.tech/media/posts/7/this-is-how.jpg" alt="Coffee and book" />
                
  <p>
    The true stories rarely have happy endings. I finished my journey through "<a href="https://www.goodreads.com/book/show/49247043-this-is-how-they-tell-me-the-world-ends" target="_blank">This is How They Tell Me the World Ends</a>", a readable tour through the shady and yet still shadier parts of cyber weapons market by New York Times journalist Nicole Perlroth. It's not such a spoiler to let you know that we're all the canon fodder in the ongoing escalation of nation states to corner access on hacking tools that can allow them to disable their adversaries. But as someone who casually pays attention to the market of offensive tech, this book offers a staggering breadth of coverage, introducing a wide cast of players on all sides.
  </p>

  <p>
    It's readable and fast paced and Perlroth has a relatable narrative voice and also makes for a good central character navigating from one technology nightmare to the next. She's good at avoiding the technical jargon where it's not needed and explaining it where it's unavoidable. I think her short-cuts to educating readers on what are sometimes really complicated topics are like fingernails on a chalkboard to experts in cyber security fields, but this book isn't aimed at them. And it's better for it.
  </p>

  <p>
    I decided to read the book actually after catching some critical reviews by people more on the engineering side of technology. One thing they had in common aside from being male was they hadn't actually gotten that far through it. I wonder if even finished. It's fast paced and at time reads a bit like a spy thriller though with occasional reminders that it's all happening, and by the way, the controls that run all of our water, electricity, telecommunications and more are online and not that terribly secure.&nbsp;
  </p>
<hr class="separator separator--dots" />

  <p>
    <strong></strong><strong>Update:</strong> If you do want to read a detailed and well-written dive into the book's technical faults, <a href="https://foreignpolicy.com/2021/05/03/cybersecurity-ignorance-is-dangerous/" target="_blank">Tarah Wheeler has written this in Foreign Policy magazine</a>.
  </p>
<hr class="separator separator--dots" />

  <p>
    There's a lot of inside baseball in the early chapters about the New York Times and how it operates on these kinds of stories, and how it plays well, or doesn't play well, with others. the book starts off with her involvement in reporting on the Snowden leaks of NSA programs, and there's no shortage of snark about The Guardian. But that soon gives way to a world tour of various hacker communities, brokers of the unpatched holes in your mobile's operating system, and national security experts whose names you may not see in the papers very much because they're actually doing the work.&nbsp;To be honest, if the book can make a general audience more interested in these kinds of issues, then I think that's a good thing overall.
  </p>

  <p>
    It's one of these books that I think I'll hit again with the highlighter and the PostIt notes. It was around page 137, in the chapter called "The Kurd" that I started folding corners of pages to return to.&nbsp; It's not that if I leave a book completely un-ravaged that it was a bad read, but the highest honour my nonfiction reads have are to be well worn, with ugly misshapen spines from being left open, creases in the corners from bookmarking and little semi-legible notes in the margins.&nbsp;
  </p>

  <p>
    In a nutshell, everything's exploitable if you look hard enough, long enough. And there are governments that will pay a lot of money to obtain this. The Snowden leaks showed some of this and how the NSA and GSHQ exploited this. Later on, through Wikileaks and others, we've all been able to learn about hacking tools of the CIA. These tools are exploited by Russia, China, Saudi Arabia, Israel, etc. against targets ranging from political leaders, corporate giants like Jeff Bezos to investigative journalists and human rights investigators. And often, such as attacks that hit things the NHS, the rest of us.
  </p>

  <p>
    There are reasonable actions governments can take that governments can do, summarised in the books' closing. Don't run elections online. Patch software instead of hoarding these security holes for some potential use. Secure more infrastructure. Encourage people to use end to end encryption, or even set government limits on what's considered minimally secure instead of lobbying for back doors. Consider some kinds of rigorous standards for people put in places of high trust for securing the things we all use.
  </p>

  <p>
    But it's a complexity trap. If you want to scale systems that growing numbers of people need (clean water, telecommunications, power grid management, etc.) then the place to do that is online. And once there, can't take it back off again. All this combined digital infrastructure that runs civilisation exists where it does for a reason: that's where It works. And that's where it's going to be attacked. Attackers can be wrong ever day, and keep trying. Defence can't be wrong any day.
  </p>

  <p>
    The book focuses a lot on the 0day market. These are exploits that the makers of software don't know exist (and have had zero days to fix, get it?). It's an expensive market as these are harder to find than the loads of exploits that just exist because so many systems we rely on use outdated operating systems or built with old or unsupported code. The book gets into both of these kind of vulnerabilities, plus the human side of things, such as how social networks can game human perceptions for political ends. But the 0day industry is maybe the most symbolic of the whole trade. Bug hunters can either get paid thousands to turn them over to the companies that can fix them, or tens if not hundreds of thousands to sell them on to brokers that will sell them to governments for millions. Companies can't compete with that. I don't think some even really want to.
  </p>

  <p>
    So read this one but there's a warning: You may start to appreciate the off-grid types in new ways.
  </p>
            ]]>
        </content>
    </entry>
</feed>
